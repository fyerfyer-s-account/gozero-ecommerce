// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentOrdersFieldNames          = builder.RawFieldNames(&PaymentOrders{})
	paymentOrdersRows                = strings.Join(paymentOrdersFieldNames, ",")
	paymentOrdersRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentOrdersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paymentOrdersRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentOrdersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	paymentOrdersModel interface {
		Insert(ctx context.Context, data *PaymentOrders) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*PaymentOrders, error)
		FindOneByPaymentNo(ctx context.Context, paymentNo string) (*PaymentOrders, error)
		Update(ctx context.Context, data *PaymentOrders) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPaymentOrdersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PaymentOrders struct {
		Id          uint64         `db:"id"`           // è‡ªå¢žID
		PaymentNo   string         `db:"payment_no"`   // æ”¯ä»˜å•å·
		OrderNo     string         `db:"order_no"`     // è®¢å•å·
		UserId      uint64         `db:"user_id"`      // ç”¨æˆ·ID
		Amount      float64        `db:"amount"`       // æ”¯ä»˜é‡‘é¢
		Channel     int64          `db:"channel"`      // æ”¯ä»˜æ¸ é“ 1:å¾®ä¿¡ 2:æ”¯ä»˜å® 3:ä½™é¢
		ChannelData sql.NullString `db:"channel_data"` // æ”¯ä»˜æ¸ é“æ•°æ®
		Status      int64          `db:"status"`       // çŠ¶æ€ 1:å¾…æ”¯ä»˜ 2:æ”¯ä»˜ä¸­ 3:å·²æ”¯ä»˜ 4:å·²é€€æ¬¾ 5:å·²å…³é—­
		NotifyUrl   sql.NullString `db:"notify_url"`   // å›žè°ƒåœ°å€
		ReturnUrl   sql.NullString `db:"return_url"`   // è¿”å›žåœ°å€
		ExpireTime  sql.NullTime   `db:"expire_time"`  // è¿‡æœŸæ—¶é—´
		PayTime     sql.NullTime   `db:"pay_time"`     // æ”¯ä»˜æ—¶é—´
		CreatedAt   time.Time      `db:"created_at"`   // åˆ›å»ºæ—¶é—´
		UpdatedAt   time.Time      `db:"updated_at"`   // æ›´æ–°æ—¶é—´
	}
)

func newPaymentOrdersModel(conn sqlx.SqlConn) *defaultPaymentOrdersModel {
	return &defaultPaymentOrdersModel{
		conn:  conn,
		table: "`payment_orders`",
	}
}

func (m *defaultPaymentOrdersModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaymentOrdersModel) FindOne(ctx context.Context, id uint64) (*PaymentOrders, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentOrdersRows, m.table)
	var resp PaymentOrders
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentOrdersModel) FindOneByPaymentNo(ctx context.Context, paymentNo string) (*PaymentOrders, error) {
	var resp PaymentOrders
	query := fmt.Sprintf("select %s from %s where `payment_no` = ? limit 1", paymentOrdersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, paymentNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentOrdersModel) Insert(ctx context.Context, data *PaymentOrders) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, paymentOrdersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PaymentNo, data.OrderNo, data.UserId, data.Amount, data.Channel, data.ChannelData, data.Status, data.NotifyUrl, data.ReturnUrl, data.ExpireTime, data.PayTime)
	return ret, err
}

func (m *defaultPaymentOrdersModel) Update(ctx context.Context, newData *PaymentOrders) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentOrdersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.PaymentNo, newData.OrderNo, newData.UserId, newData.Amount, newData.Channel, newData.ChannelData, newData.Status, newData.NotifyUrl, newData.ReturnUrl, newData.ExpireTime, newData.PayTime, newData.Id)
	return err
}

func (m *defaultPaymentOrdersModel) tableName() string {
	return m.table
}
