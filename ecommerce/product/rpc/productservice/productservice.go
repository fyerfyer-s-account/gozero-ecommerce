// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.4
// Source: product.proto

package productservice

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/product/rpc/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Category               = product.Category
	CreateCategoryRequest  = product.CreateCategoryRequest
	CreateCategoryResponse = product.CreateCategoryResponse
	CreateProductRequest   = product.CreateProductRequest
	CreateProductResponse  = product.CreateProductResponse
	CreateReviewRequest    = product.CreateReviewRequest
	CreateReviewResponse   = product.CreateReviewResponse
	CreateSkuRequest       = product.CreateSkuRequest
	CreateSkuResponse      = product.CreateSkuResponse
	DeleteCategoryRequest  = product.DeleteCategoryRequest
	DeleteCategoryResponse = product.DeleteCategoryResponse
	DeleteProductRequest   = product.DeleteProductRequest
	DeleteProductResponse  = product.DeleteProductResponse
	DeleteReviewRequest    = product.DeleteReviewRequest
	DeleteReviewResponse   = product.DeleteReviewResponse
	DeleteSkuRequest       = product.DeleteSkuRequest
	DeleteSkuResponse      = product.DeleteSkuResponse
	Empty                  = product.Empty
	GetCategoriesResponse  = product.GetCategoriesResponse
	GetCategoryRequest     = product.GetCategoryRequest
	GetCategoryResponse    = product.GetCategoryResponse
	GetProductRequest      = product.GetProductRequest
	GetProductResponse     = product.GetProductResponse
	GetSkuRequest          = product.GetSkuRequest
	GetSkuResponse         = product.GetSkuResponse
	ListCategoriesRequest  = product.ListCategoriesRequest
	ListCategoriesResponse = product.ListCategoriesResponse
	ListProductsRequest    = product.ListProductsRequest
	ListProductsResponse   = product.ListProductsResponse
	ListReviewsRequest     = product.ListReviewsRequest
	ListReviewsResponse    = product.ListReviewsResponse
	ListSkusRequest        = product.ListSkusRequest
	ListSkusResponse       = product.ListSkusResponse
	Product                = product.Product
	Review                 = product.Review
	Sku                    = product.Sku
	SkuAttribute           = product.SkuAttribute
	UpdateCategoryRequest  = product.UpdateCategoryRequest
	UpdateCategoryResponse = product.UpdateCategoryResponse
	UpdateProductRequest   = product.UpdateProductRequest
	UpdateProductResponse  = product.UpdateProductResponse
	UpdateReviewRequest    = product.UpdateReviewRequest
	UpdateReviewResponse   = product.UpdateReviewResponse
	UpdateSkuRequest       = product.UpdateSkuRequest
	UpdateSkuResponse      = product.UpdateSkuResponse

	ProductService interface {
		// Product Management
		CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
		GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
		ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
		DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
		// Category Management
		CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
		UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
		DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
		GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
		ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
		GetCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
		// SKU Management
		CreateSku(ctx context.Context, in *CreateSkuRequest, opts ...grpc.CallOption) (*CreateSkuResponse, error)
		UpdateSku(ctx context.Context, in *UpdateSkuRequest, opts ...grpc.CallOption) (*UpdateSkuResponse, error)
		GetSku(ctx context.Context, in *GetSkuRequest, opts ...grpc.CallOption) (*GetSkuResponse, error)
		ListSkus(ctx context.Context, in *ListSkusRequest, opts ...grpc.CallOption) (*ListSkusResponse, error)
		DeleteSku(ctx context.Context, in *DeleteSkuRequest, opts ...grpc.CallOption) (*DeleteSkuResponse, error)
		// Review Management
		CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error)
		UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error)
		DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error)
		ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error)
	}

	defaultProductService struct {
		cli zrpc.Client
	}
)

func NewProductService(cli zrpc.Client) ProductService {
	return &defaultProductService{
		cli: cli,
	}
}

// Product Management
func (m *defaultProductService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

func (m *defaultProductService) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

func (m *defaultProductService) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

func (m *defaultProductService) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.ListProducts(ctx, in, opts...)
}

func (m *defaultProductService) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

// Category Management
func (m *defaultProductService) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.CreateCategory(ctx, in, opts...)
}

func (m *defaultProductService) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

func (m *defaultProductService) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}

func (m *defaultProductService) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.GetCategory(ctx, in, opts...)
}

func (m *defaultProductService) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.ListCategories(ctx, in, opts...)
}

func (m *defaultProductService) GetCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.GetCategories(ctx, in, opts...)
}

// SKU Management
func (m *defaultProductService) CreateSku(ctx context.Context, in *CreateSkuRequest, opts ...grpc.CallOption) (*CreateSkuResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.CreateSku(ctx, in, opts...)
}

func (m *defaultProductService) UpdateSku(ctx context.Context, in *UpdateSkuRequest, opts ...grpc.CallOption) (*UpdateSkuResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.UpdateSku(ctx, in, opts...)
}

func (m *defaultProductService) GetSku(ctx context.Context, in *GetSkuRequest, opts ...grpc.CallOption) (*GetSkuResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.GetSku(ctx, in, opts...)
}

func (m *defaultProductService) ListSkus(ctx context.Context, in *ListSkusRequest, opts ...grpc.CallOption) (*ListSkusResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.ListSkus(ctx, in, opts...)
}

func (m *defaultProductService) DeleteSku(ctx context.Context, in *DeleteSkuRequest, opts ...grpc.CallOption) (*DeleteSkuResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.DeleteSku(ctx, in, opts...)
}

// Review Management
func (m *defaultProductService) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.CreateReview(ctx, in, opts...)
}

func (m *defaultProductService) UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.UpdateReview(ctx, in, opts...)
}

func (m *defaultProductService) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.DeleteReview(ctx, in, opts...)
}

func (m *defaultProductService) ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.ListReviews(ctx, in, opts...)
}
