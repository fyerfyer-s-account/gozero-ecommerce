// Code generated by mockery v2.50.4. DO NOT EDIT.

package order

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	order "github.com/fyerfyer/gozero-ecommerce/ecommerce/order/rpc/order"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) CancelOrder(ctx context.Context, in *order.CancelOrderRequest, opts ...grpc.CallOption) (*order.CancelOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 *order.CancelOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.CancelOrderRequest, ...grpc.CallOption) (*order.CancelOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.CancelOrderRequest, ...grpc.CallOption) *order.CancelOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.CancelOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.CancelOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type OrderService_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.CancelOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) CancelOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_CancelOrder_Call {
	return &OrderService_CancelOrder_Call{Call: _e.mock.On("CancelOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_CancelOrder_Call) Run(run func(ctx context.Context, in *order.CancelOrderRequest, opts ...grpc.CallOption)) *OrderService_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.CancelOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_CancelOrder_Call) Return(_a0 *order.CancelOrderResponse, _a1 error) *OrderService_CancelOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CancelOrder_Call) RunAndReturn(run func(context.Context, *order.CancelOrderRequest, ...grpc.CallOption) (*order.CancelOrderResponse, error)) *OrderService_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) ConfirmOrder(ctx context.Context, in *order.ConfirmOrderRequest, opts ...grpc.CallOption) (*order.ConfirmOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmOrder")
	}

	var r0 *order.ConfirmOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.ConfirmOrderRequest, ...grpc.CallOption) (*order.ConfirmOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.ConfirmOrderRequest, ...grpc.CallOption) *order.ConfirmOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.ConfirmOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.ConfirmOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_ConfirmOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmOrder'
type OrderService_ConfirmOrder_Call struct {
	*mock.Call
}

// ConfirmOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.ConfirmOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) ConfirmOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_ConfirmOrder_Call {
	return &OrderService_ConfirmOrder_Call{Call: _e.mock.On("ConfirmOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_ConfirmOrder_Call) Run(run func(ctx context.Context, in *order.ConfirmOrderRequest, opts ...grpc.CallOption)) *OrderService_ConfirmOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.ConfirmOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_ConfirmOrder_Call) Return(_a0 *order.ConfirmOrderResponse, _a1 error) *OrderService_ConfirmOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_ConfirmOrder_Call) RunAndReturn(run func(context.Context, *order.ConfirmOrderRequest, ...grpc.CallOption) (*order.ConfirmOrderResponse, error)) *OrderService_ConfirmOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) CreateOrder(ctx context.Context, in *order.CreateOrderRequest, opts ...grpc.CallOption) (*order.CreateOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *order.CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.CreateOrderRequest, ...grpc.CallOption) (*order.CreateOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.CreateOrderRequest, ...grpc.CallOption) *order.CreateOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.CreateOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.CreateOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) CreateOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_CreateOrder_Call {
	return &OrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_CreateOrder_Call) Run(run func(ctx context.Context, in *order.CreateOrderRequest, opts ...grpc.CallOption)) *OrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.CreateOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_CreateOrder_Call) Return(_a0 *order.CreateOrderResponse, _a1 error) *OrderService_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CreateOrder_Call) RunAndReturn(run func(context.Context, *order.CreateOrderRequest, ...grpc.CallOption) (*order.CreateOrderResponse, error)) *OrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefund provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) CreateRefund(ctx context.Context, in *order.CreateRefundRequest, opts ...grpc.CallOption) (*order.CreateRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefund")
	}

	var r0 *order.CreateRefundResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.CreateRefundRequest, ...grpc.CallOption) (*order.CreateRefundResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.CreateRefundRequest, ...grpc.CallOption) *order.CreateRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.CreateRefundResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.CreateRefundRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CreateRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefund'
type OrderService_CreateRefund_Call struct {
	*mock.Call
}

// CreateRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.CreateRefundRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) CreateRefund(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_CreateRefund_Call {
	return &OrderService_CreateRefund_Call{Call: _e.mock.On("CreateRefund",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_CreateRefund_Call) Run(run func(ctx context.Context, in *order.CreateRefundRequest, opts ...grpc.CallOption)) *OrderService_CreateRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.CreateRefundRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_CreateRefund_Call) Return(_a0 *order.CreateRefundResponse, _a1 error) *OrderService_CreateRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CreateRefund_Call) RunAndReturn(run func(context.Context, *order.CreateRefundRequest, ...grpc.CallOption) (*order.CreateRefundResponse, error)) *OrderService_CreateRefund_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) GetOrder(ctx context.Context, in *order.GetOrderRequest, opts ...grpc.CallOption) (*order.GetOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *order.GetOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetOrderRequest, ...grpc.CallOption) (*order.GetOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetOrderRequest, ...grpc.CallOption) *order.GetOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.GetOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.GetOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type OrderService_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.GetOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) GetOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_GetOrder_Call {
	return &OrderService_GetOrder_Call{Call: _e.mock.On("GetOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_GetOrder_Call) Run(run func(ctx context.Context, in *order.GetOrderRequest, opts ...grpc.CallOption)) *OrderService_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.GetOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_GetOrder_Call) Return(_a0 *order.GetOrderResponse, _a1 error) *OrderService_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_GetOrder_Call) RunAndReturn(run func(context.Context, *order.GetOrderRequest, ...grpc.CallOption) (*order.GetOrderResponse, error)) *OrderService_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentStatus provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) GetPaymentStatus(ctx context.Context, in *order.GetPaymentStatusRequest, opts ...grpc.CallOption) (*order.GetPaymentStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentStatus")
	}

	var r0 *order.GetPaymentStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetPaymentStatusRequest, ...grpc.CallOption) (*order.GetPaymentStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetPaymentStatusRequest, ...grpc.CallOption) *order.GetPaymentStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.GetPaymentStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.GetPaymentStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetPaymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentStatus'
type OrderService_GetPaymentStatus_Call struct {
	*mock.Call
}

// GetPaymentStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.GetPaymentStatusRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) GetPaymentStatus(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_GetPaymentStatus_Call {
	return &OrderService_GetPaymentStatus_Call{Call: _e.mock.On("GetPaymentStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_GetPaymentStatus_Call) Run(run func(ctx context.Context, in *order.GetPaymentStatusRequest, opts ...grpc.CallOption)) *OrderService_GetPaymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.GetPaymentStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_GetPaymentStatus_Call) Return(_a0 *order.GetPaymentStatusResponse, _a1 error) *OrderService_GetPaymentStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_GetPaymentStatus_Call) RunAndReturn(run func(context.Context, *order.GetPaymentStatusRequest, ...grpc.CallOption) (*order.GetPaymentStatusResponse, error)) *OrderService_GetPaymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefund provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) GetRefund(ctx context.Context, in *order.GetRefundRequest, opts ...grpc.CallOption) (*order.GetRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRefund")
	}

	var r0 *order.GetRefundResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetRefundRequest, ...grpc.CallOption) (*order.GetRefundResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetRefundRequest, ...grpc.CallOption) *order.GetRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.GetRefundResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.GetRefundRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefund'
type OrderService_GetRefund_Call struct {
	*mock.Call
}

// GetRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.GetRefundRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) GetRefund(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_GetRefund_Call {
	return &OrderService_GetRefund_Call{Call: _e.mock.On("GetRefund",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_GetRefund_Call) Run(run func(ctx context.Context, in *order.GetRefundRequest, opts ...grpc.CallOption)) *OrderService_GetRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.GetRefundRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_GetRefund_Call) Return(_a0 *order.GetRefundResponse, _a1 error) *OrderService_GetRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_GetRefund_Call) RunAndReturn(run func(context.Context, *order.GetRefundRequest, ...grpc.CallOption) (*order.GetRefundResponse, error)) *OrderService_GetRefund_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrders provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) ListOrders(ctx context.Context, in *order.ListOrdersRequest, opts ...grpc.CallOption) (*order.ListOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrders")
	}

	var r0 *order.ListOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.ListOrdersRequest, ...grpc.CallOption) (*order.ListOrdersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.ListOrdersRequest, ...grpc.CallOption) *order.ListOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.ListOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.ListOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_ListOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrders'
type OrderService_ListOrders_Call struct {
	*mock.Call
}

// ListOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.ListOrdersRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) ListOrders(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_ListOrders_Call {
	return &OrderService_ListOrders_Call{Call: _e.mock.On("ListOrders",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_ListOrders_Call) Run(run func(ctx context.Context, in *order.ListOrdersRequest, opts ...grpc.CallOption)) *OrderService_ListOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.ListOrdersRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_ListOrders_Call) Return(_a0 *order.ListOrdersResponse, _a1 error) *OrderService_ListOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_ListOrders_Call) RunAndReturn(run func(context.Context, *order.ListOrdersRequest, ...grpc.CallOption) (*order.ListOrdersResponse, error)) *OrderService_ListOrders_Call {
	_c.Call.Return(run)
	return _c
}

// PayOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) PayOrder(ctx context.Context, in *order.PayOrderRequest, opts ...grpc.CallOption) (*order.PayOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 *order.PayOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.PayOrderRequest, ...grpc.CallOption) (*order.PayOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.PayOrderRequest, ...grpc.CallOption) *order.PayOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.PayOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.PayOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type OrderService_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.PayOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) PayOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_PayOrder_Call {
	return &OrderService_PayOrder_Call{Call: _e.mock.On("PayOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_PayOrder_Call) Run(run func(ctx context.Context, in *order.PayOrderRequest, opts ...grpc.CallOption)) *OrderService_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.PayOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_PayOrder_Call) Return(_a0 *order.PayOrderResponse, _a1 error) *OrderService_PayOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_PayOrder_Call) RunAndReturn(run func(context.Context, *order.PayOrderRequest, ...grpc.CallOption) (*order.PayOrderResponse, error)) *OrderService_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessRefund provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) ProcessRefund(ctx context.Context, in *order.ProcessRefundRequest, opts ...grpc.CallOption) (*order.ProcessRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProcessRefund")
	}

	var r0 *order.ProcessRefundResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.ProcessRefundRequest, ...grpc.CallOption) (*order.ProcessRefundResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.ProcessRefundRequest, ...grpc.CallOption) *order.ProcessRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.ProcessRefundResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.ProcessRefundRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_ProcessRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessRefund'
type OrderService_ProcessRefund_Call struct {
	*mock.Call
}

// ProcessRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.ProcessRefundRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) ProcessRefund(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_ProcessRefund_Call {
	return &OrderService_ProcessRefund_Call{Call: _e.mock.On("ProcessRefund",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_ProcessRefund_Call) Run(run func(ctx context.Context, in *order.ProcessRefundRequest, opts ...grpc.CallOption)) *OrderService_ProcessRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.ProcessRefundRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_ProcessRefund_Call) Return(_a0 *order.ProcessRefundResponse, _a1 error) *OrderService_ProcessRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_ProcessRefund_Call) RunAndReturn(run func(context.Context, *order.ProcessRefundRequest, ...grpc.CallOption) (*order.ProcessRefundResponse, error)) *OrderService_ProcessRefund_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) ReceiveOrder(ctx context.Context, in *order.ReceiveOrderRequest, opts ...grpc.CallOption) (*order.ReceiveOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveOrder")
	}

	var r0 *order.ReceiveOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.ReceiveOrderRequest, ...grpc.CallOption) (*order.ReceiveOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.ReceiveOrderRequest, ...grpc.CallOption) *order.ReceiveOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.ReceiveOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.ReceiveOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_ReceiveOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveOrder'
type OrderService_ReceiveOrder_Call struct {
	*mock.Call
}

// ReceiveOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.ReceiveOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) ReceiveOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_ReceiveOrder_Call {
	return &OrderService_ReceiveOrder_Call{Call: _e.mock.On("ReceiveOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_ReceiveOrder_Call) Run(run func(ctx context.Context, in *order.ReceiveOrderRequest, opts ...grpc.CallOption)) *OrderService_ReceiveOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.ReceiveOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_ReceiveOrder_Call) Return(_a0 *order.ReceiveOrderResponse, _a1 error) *OrderService_ReceiveOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_ReceiveOrder_Call) RunAndReturn(run func(context.Context, *order.ReceiveOrderRequest, ...grpc.CallOption) (*order.ReceiveOrderResponse, error)) *OrderService_ReceiveOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ShipOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderService) ShipOrder(ctx context.Context, in *order.ShipOrderRequest, opts ...grpc.CallOption) (*order.ShipOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShipOrder")
	}

	var r0 *order.ShipOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.ShipOrderRequest, ...grpc.CallOption) (*order.ShipOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.ShipOrderRequest, ...grpc.CallOption) *order.ShipOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.ShipOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.ShipOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_ShipOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShipOrder'
type OrderService_ShipOrder_Call struct {
	*mock.Call
}

// ShipOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - in *order.ShipOrderRequest
//   - opts ...grpc.CallOption
func (_e *OrderService_Expecter) ShipOrder(ctx interface{}, in interface{}, opts ...interface{}) *OrderService_ShipOrder_Call {
	return &OrderService_ShipOrder_Call{Call: _e.mock.On("ShipOrder",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *OrderService_ShipOrder_Call) Run(run func(ctx context.Context, in *order.ShipOrderRequest, opts ...grpc.CallOption)) *OrderService_ShipOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*order.ShipOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *OrderService_ShipOrder_Call) Return(_a0 *order.ShipOrderResponse, _a1 error) *OrderService_ShipOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_ShipOrder_Call) RunAndReturn(run func(context.Context, *order.ShipOrderRequest, ...grpc.CallOption) (*order.ShipOrderResponse, error)) *OrderService_ShipOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
