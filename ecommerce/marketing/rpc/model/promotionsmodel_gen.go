// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	promotionsFieldNames          = builder.RawFieldNames(&Promotions{})
	promotionsRows                = strings.Join(promotionsFieldNames, ",")
	promotionsRowsExpectAutoSet   = strings.Join(stringx.Remove(promotionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	promotionsRowsWithPlaceHolder = strings.Join(stringx.Remove(promotionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallMarketingPromotionsIdPrefix = "cache:mallMarketing:promotions:id:"
)

type (
	promotionsModel interface {
		Insert(ctx context.Context, data *Promotions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Promotions, error)
		Update(ctx context.Context, data *Promotions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPromotionsModel struct {
		sqlc.CachedConn
		table string
	}

	Promotions struct {
		Id        uint64       `db:"id"`         // æ´»åŠ¨ID
		Name      string       `db:"name"`       // æ´»åŠ¨åç§°
		Type      int64        `db:"type"`       // æ´»åŠ¨ç±»åž‹ 1:æ»¡å‡ 2:æŠ˜æ‰£ 3:ç§’æ€
		Rules     string       `db:"rules"`      // ä¿ƒé”€è§„åˆ™
		Status    int64        `db:"status"`     // çŠ¶æ€ 0:æœªå¼€å§‹ 1:è¿›è¡Œä¸­ 2:å·²ç»“æŸ
		StartTime sql.NullTime `db:"start_time"` // å¼€å§‹æ—¶é—´
		EndTime   sql.NullTime `db:"end_time"`   // ç»“æŸæ—¶é—´
		CreatedAt time.Time    `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time    `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newPromotionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPromotionsModel {
	return &defaultPromotionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`promotions`",
	}
}

func (m *defaultPromotionsModel) Delete(ctx context.Context, id uint64) error {
	mallMarketingPromotionsIdKey := fmt.Sprintf("%s%v", cacheMallMarketingPromotionsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallMarketingPromotionsIdKey)
	return err
}

func (m *defaultPromotionsModel) FindOne(ctx context.Context, id uint64) (*Promotions, error) {
	mallMarketingPromotionsIdKey := fmt.Sprintf("%s%v", cacheMallMarketingPromotionsIdPrefix, id)
	var resp Promotions
	err := m.QueryRowCtx(ctx, &resp, mallMarketingPromotionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", promotionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPromotionsModel) Insert(ctx context.Context, data *Promotions) (sql.Result, error) {
	mallMarketingPromotionsIdKey := fmt.Sprintf("%s%v", cacheMallMarketingPromotionsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, promotionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Type, data.Rules, data.Status, data.StartTime, data.EndTime)
	}, mallMarketingPromotionsIdKey)
	return ret, err
}

func (m *defaultPromotionsModel) Update(ctx context.Context, data *Promotions) error {
	mallMarketingPromotionsIdKey := fmt.Sprintf("%s%v", cacheMallMarketingPromotionsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, promotionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Type, data.Rules, data.Status, data.StartTime, data.EndTime, data.Id)
	}, mallMarketingPromotionsIdKey)
	return err
}

func (m *defaultPromotionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallMarketingPromotionsIdPrefix, primary)
}

func (m *defaultPromotionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", promotionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPromotionsModel) tableName() string {
	return m.table
}
