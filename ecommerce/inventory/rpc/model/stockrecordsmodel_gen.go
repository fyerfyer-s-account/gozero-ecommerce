// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stockRecordsFieldNames          = builder.RawFieldNames(&StockRecords{})
	stockRecordsRows                = strings.Join(stockRecordsFieldNames, ",")
	stockRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(stockRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stockRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(stockRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallInventoryStockRecordsIdPrefix = "cache:mallInventory:stockRecords:id:"
)

type (
	stockRecordsModel interface {
		Insert(ctx context.Context, data *StockRecords) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*StockRecords, error)
		Update(ctx context.Context, data *StockRecords) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultStockRecordsModel struct {
		sqlc.CachedConn
		table string
	}

	StockRecords struct {
		Id          uint64         `db:"id"`           // è®°å½•ID
		SkuId       uint64         `db:"sku_id"`       // SKU ID
		WarehouseId uint64         `db:"warehouse_id"` // ä»“åº“ID
		Type        int64          `db:"type"`         // ç±»åž‹ 1:å…¥åº“ 2:å‡ºåº“ 3:é”å®š 4:è§£é”
		Quantity    int64          `db:"quantity"`     // æ•°é‡
		OrderNo     sql.NullString `db:"order_no"`     // è®¢å•å·
		Remark      sql.NullString `db:"remark"`       // å¤‡æ³¨
		Operator    sql.NullString `db:"operator"`     // æ“ä½œäºº
		CreatedAt   time.Time      `db:"created_at"`   // åˆ›å»ºæ—¶é—´
	}
)

func newStockRecordsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStockRecordsModel {
	return &defaultStockRecordsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`stock_records`",
	}
}

func (m *defaultStockRecordsModel) Delete(ctx context.Context, id uint64) error {
	mallInventoryStockRecordsIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockRecordsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallInventoryStockRecordsIdKey)
	return err
}

func (m *defaultStockRecordsModel) FindOne(ctx context.Context, id uint64) (*StockRecords, error) {
	mallInventoryStockRecordsIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockRecordsIdPrefix, id)
	var resp StockRecords
	err := m.QueryRowCtx(ctx, &resp, mallInventoryStockRecordsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stockRecordsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStockRecordsModel) Insert(ctx context.Context, data *StockRecords) (sql.Result, error) {
	mallInventoryStockRecordsIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockRecordsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, stockRecordsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SkuId, data.WarehouseId, data.Type, data.Quantity, data.OrderNo, data.Remark, data.Operator)
	}, mallInventoryStockRecordsIdKey)
	return ret, err
}

func (m *defaultStockRecordsModel) Update(ctx context.Context, data *StockRecords) error {
	mallInventoryStockRecordsIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockRecordsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stockRecordsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SkuId, data.WarehouseId, data.Type, data.Quantity, data.OrderNo, data.Remark, data.Operator, data.Id)
	}, mallInventoryStockRecordsIdKey)
	return err
}

func (m *defaultStockRecordsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallInventoryStockRecordsIdPrefix, primary)
}

func (m *defaultStockRecordsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stockRecordsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStockRecordsModel) tableName() string {
	return m.table
}
