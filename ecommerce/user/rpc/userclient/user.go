// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package userclient

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddAddressRequest        = user.AddAddressRequest
	AddAddressResponse       = user.AddAddressResponse
	Address                  = user.Address
	ChangePasswordRequest    = user.ChangePasswordRequest
	ChangePasswordResponse   = user.ChangePasswordResponse
	DeleteAddressRequest     = user.DeleteAddressRequest
	DeleteAddressResponse    = user.DeleteAddressResponse
	GetTransactionsRequest   = user.GetTransactionsRequest
	GetTransactionsResponse  = user.GetTransactionsResponse
	GetUserAddressesRequest  = user.GetUserAddressesRequest
	GetUserAddressesResponse = user.GetUserAddressesResponse
	GetUserInfoRequest       = user.GetUserInfoRequest
	GetUserInfoResponse      = user.GetUserInfoResponse
	GetWalletRequest         = user.GetWalletRequest
	GetWalletResponse        = user.GetWalletResponse
	LoginRequest             = user.LoginRequest
	LoginResponse            = user.LoginResponse
	RechargeWalletRequest    = user.RechargeWalletRequest
	RechargeWalletResponse   = user.RechargeWalletResponse
	RegisterRequest          = user.RegisterRequest
	RegisterResponse         = user.RegisterResponse
	ResetPasswordRequest     = user.ResetPasswordRequest
	ResetPasswordResponse    = user.ResetPasswordResponse
	Transaction              = user.Transaction
	UpdateAddressRequest     = user.UpdateAddressRequest
	UpdateAddressResponse    = user.UpdateAddressResponse
	UpdateUserInfoRequest    = user.UpdateUserInfoRequest
	UpdateUserInfoResponse   = user.UpdateUserInfoResponse
	UserInfo                 = user.UserInfo
	WithdrawWalletRequest    = user.WithdrawWalletRequest
	WithdrawWalletResponse   = user.WithdrawWalletResponse

	User interface {
		// 用户注册
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 用户登录
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 获取用户信息
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
		GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error)
		GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
		// 更新用户信息
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
		// 修改密码
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
		// 重置密码
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
		// 地址管理
		AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
		UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
		DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error)
		// 钱包操作
		GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error)
		RechargeWallet(ctx context.Context, in *RechargeWalletRequest, opts ...grpc.CallOption) (*RechargeWalletResponse, error)
		WithdrawWallet(ctx context.Context, in *WithdrawWalletRequest, opts ...grpc.CallOption) (*WithdrawWalletResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 用户注册
func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 用户登录
func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultUser) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUser) GetUserAddresses(ctx context.Context, in *GetUserAddressesRequest, opts ...grpc.CallOption) (*GetUserAddressesResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserAddresses(ctx, in, opts...)
}

func (m *defaultUser) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetTransactions(ctx, in, opts...)
}

// 更新用户信息
func (m *defaultUser) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 修改密码
func (m *defaultUser) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

// 重置密码
func (m *defaultUser) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ResetPassword(ctx, in, opts...)
}

// 地址管理
func (m *defaultUser) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AddAddress(ctx, in, opts...)
}

func (m *defaultUser) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateAddress(ctx, in, opts...)
}

func (m *defaultUser) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DeleteAddress(ctx, in, opts...)
}

// 钱包操作
func (m *defaultUser) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetWallet(ctx, in, opts...)
}

func (m *defaultUser) RechargeWallet(ctx context.Context, in *RechargeWalletRequest, opts ...grpc.CallOption) (*RechargeWalletResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.RechargeWallet(ctx, in, opts...)
}

func (m *defaultUser) WithdrawWallet(ctx context.Context, in *WithdrawWalletRequest, opts ...grpc.CallOption) (*WithdrawWalletResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.WithdrawWallet(ctx, in, opts...)
}
