// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	warehousesFieldNames          = builder.RawFieldNames(&Warehouses{})
	warehousesRows                = strings.Join(warehousesFieldNames, ",")
	warehousesRowsExpectAutoSet   = strings.Join(stringx.Remove(warehousesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	warehousesRowsWithPlaceHolder = strings.Join(stringx.Remove(warehousesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallInventoryWarehousesIdPrefix = "cache:mallInventory:warehouses:id:"
)

type (
	warehousesModel interface {
		Insert(ctx context.Context, data *Warehouses) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Warehouses, error)
		Update(ctx context.Context, data *Warehouses) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultWarehousesModel struct {
		sqlc.CachedConn
		table string
	}

	Warehouses struct {
		Id        uint64         `db:"id"`         // ä»“åº“ID
		Name      string         `db:"name"`       // ä»“åº“åç§°
		Address   string         `db:"address"`    // ä»“åº“åœ°å€
		Contact   sql.NullString `db:"contact"`    // è”ç³»äºº
		Phone     sql.NullString `db:"phone"`      // è”ç³»ç”µè¯
		Status    int64          `db:"status"`     // çŠ¶æ€ 1:æ­£å¸¸ 2:åœç”¨
		CreatedAt time.Time      `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time      `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newWarehousesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWarehousesModel {
	return &defaultWarehousesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`warehouses`",
	}
}

func (m *defaultWarehousesModel) Delete(ctx context.Context, id uint64) error {
	mallInventoryWarehousesIdKey := fmt.Sprintf("%s%v", cacheMallInventoryWarehousesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallInventoryWarehousesIdKey)
	return err
}

func (m *defaultWarehousesModel) FindOne(ctx context.Context, id uint64) (*Warehouses, error) {
	mallInventoryWarehousesIdKey := fmt.Sprintf("%s%v", cacheMallInventoryWarehousesIdPrefix, id)
	var resp Warehouses
	err := m.QueryRowCtx(ctx, &resp, mallInventoryWarehousesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", warehousesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWarehousesModel) Insert(ctx context.Context, data *Warehouses) (sql.Result, error) {
	mallInventoryWarehousesIdKey := fmt.Sprintf("%s%v", cacheMallInventoryWarehousesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, warehousesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Address, data.Contact, data.Phone, data.Status)
	}, mallInventoryWarehousesIdKey)
	return ret, err
}

func (m *defaultWarehousesModel) Update(ctx context.Context, data *Warehouses) error {
	mallInventoryWarehousesIdKey := fmt.Sprintf("%s%v", cacheMallInventoryWarehousesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, warehousesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Address, data.Contact, data.Phone, data.Status, data.Id)
	}, mallInventoryWarehousesIdKey)
	return err
}

func (m *defaultWarehousesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallInventoryWarehousesIdPrefix, primary)
}

func (m *defaultWarehousesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", warehousesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWarehousesModel) tableName() string {
	return m.table
}
