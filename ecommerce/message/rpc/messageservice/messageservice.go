// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: message.proto

package messageservice

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/message/rpc/message"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchSendError              = message.BatchSendError
	BatchSendMessageRequest     = message.BatchSendMessageRequest
	BatchSendMessageResponse    = message.BatchSendMessageResponse
	CreateTemplateRequest       = message.CreateTemplateRequest
	CreateTemplateResponse      = message.CreateTemplateResponse
	DeleteMessageRequest        = message.DeleteMessageRequest
	DeleteMessageResponse       = message.DeleteMessageResponse
	GetMessageRequest           = message.GetMessageRequest
	GetMessageResponse          = message.GetMessageResponse
	GetTemplateRequest          = message.GetTemplateRequest
	GetTemplateResponse         = message.GetTemplateResponse
	ListMessagesRequest         = message.ListMessagesRequest
	ListMessagesResponse        = message.ListMessagesResponse
	ListTemplatesRequest        = message.ListTemplatesRequest
	ListTemplatesResponse       = message.ListTemplatesResponse
	Message                     = message.Message
	MessageTemplate             = message.MessageTemplate
	ReadMessageRequest          = message.ReadMessageRequest
	ReadMessageResponse         = message.ReadMessageResponse
	SendMessageRequest          = message.SendMessageRequest
	SendMessageResponse         = message.SendMessageResponse
	SendTemplateMessageRequest  = message.SendTemplateMessageRequest
	SendTemplateMessageResponse = message.SendTemplateMessageResponse
	UpdateTemplateRequest       = message.UpdateTemplateRequest
	UpdateTemplateResponse      = message.UpdateTemplateResponse

	MessageService interface {
		// 消息发送
		SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
		BatchSendMessage(ctx context.Context, in *BatchSendMessageRequest, opts ...grpc.CallOption) (*BatchSendMessageResponse, error)
		SendTemplateMessage(ctx context.Context, in *SendTemplateMessageRequest, opts ...grpc.CallOption) (*SendTemplateMessageResponse, error)
		// 消息管理
		GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
		ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
		ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...grpc.CallOption) (*ReadMessageResponse, error)
		DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
		// 消息模板
		CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error)
		UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error)
		GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
		ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	}

	defaultMessageService struct {
		cli zrpc.Client
	}
)

func NewMessageService(cli zrpc.Client) MessageService {
	return &defaultMessageService{
		cli: cli,
	}
}

// 消息发送
func (m *defaultMessageService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

func (m *defaultMessageService) BatchSendMessage(ctx context.Context, in *BatchSendMessageRequest, opts ...grpc.CallOption) (*BatchSendMessageResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.BatchSendMessage(ctx, in, opts...)
}

func (m *defaultMessageService) SendTemplateMessage(ctx context.Context, in *SendTemplateMessageRequest, opts ...grpc.CallOption) (*SendTemplateMessageResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.SendTemplateMessage(ctx, in, opts...)
}

// 消息管理
func (m *defaultMessageService) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.GetMessage(ctx, in, opts...)
}

func (m *defaultMessageService) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.ListMessages(ctx, in, opts...)
}

func (m *defaultMessageService) ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...grpc.CallOption) (*ReadMessageResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.ReadMessage(ctx, in, opts...)
}

func (m *defaultMessageService) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.DeleteMessage(ctx, in, opts...)
}

// 消息模板
func (m *defaultMessageService) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.CreateTemplate(ctx, in, opts...)
}

func (m *defaultMessageService) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.UpdateTemplate(ctx, in, opts...)
}

func (m *defaultMessageService) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.GetTemplate(ctx, in, opts...)
}

func (m *defaultMessageService) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.ListTemplates(ctx, in, opts...)
}
