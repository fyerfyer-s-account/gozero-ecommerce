// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	skusFieldNames          = builder.RawFieldNames(&Skus{})
	skusRows                = strings.Join(skusFieldNames, ",")
	skusRowsExpectAutoSet   = strings.Join(stringx.Remove(skusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	skusRowsWithPlaceHolder = strings.Join(stringx.Remove(skusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	skusModel interface {
		Insert(ctx context.Context, data *Skus) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Skus, error)
		FindOneBySkuCode(ctx context.Context, skuCode string) (*Skus, error)
		Update(ctx context.Context, data *Skus) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSkusModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Skus struct {
		Id         uint64    `db:"id"`         // SKU ID
		ProductId  uint64    `db:"product_id"` // å•†å“ID
		SkuCode    string    `db:"sku_code"`   // SKUç¼–ç 
		Attributes string    `db:"attributes"` // SKUå±žæ€§
		Price      float64   `db:"price"`      // SKUä»·æ ¼
		Stock      int64     `db:"stock"`      // åº“å­˜
		Sales      int64     `db:"sales"`      // é”€é‡
		CreatedAt  time.Time `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt  time.Time `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newSkusModel(conn sqlx.SqlConn) *defaultSkusModel {
	return &defaultSkusModel{
		conn:  conn,
		table: "`skus`",
	}
}

func (m *defaultSkusModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSkusModel) FindOne(ctx context.Context, id uint64) (*Skus, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", skusRows, m.table)
	var resp Skus
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSkusModel) FindOneBySkuCode(ctx context.Context, skuCode string) (*Skus, error) {
	var resp Skus
	query := fmt.Sprintf("select %s from %s where `sku_code` = ? limit 1", skusRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, skuCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSkusModel) Insert(ctx context.Context, data *Skus) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, skusRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.SkuCode, data.Attributes, data.Price, data.Stock, data.Sales)
	return ret, err
}

func (m *defaultSkusModel) Update(ctx context.Context, newData *Skus) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, skusRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ProductId, newData.SkuCode, newData.Attributes, newData.Price, newData.Stock, newData.Sales, newData.Id)
	return err
}

func (m *defaultSkusModel) tableName() string {
	return m.table
}
