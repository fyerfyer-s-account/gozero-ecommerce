// Code generated by mockery v2.50.0. DO NOT EDIT.

package product

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	product "github.com/fyerfyer/gozero-ecommerce/ecommerce/product/rpc/product"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

type ProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductService) EXPECT() *ProductService_Expecter {
	return &ProductService_Expecter{mock: &_m.Mock}
}

// ChangeReviewStatus provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) ChangeReviewStatus(ctx context.Context, in *product.ChangeReviewStatusRequest, opts ...grpc.CallOption) (*product.ChangeReviewStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeReviewStatus")
	}

	var r0 *product.ChangeReviewStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.ChangeReviewStatusRequest, ...grpc.CallOption) (*product.ChangeReviewStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.ChangeReviewStatusRequest, ...grpc.CallOption) *product.ChangeReviewStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ChangeReviewStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.ChangeReviewStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_ChangeReviewStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeReviewStatus'
type ProductService_ChangeReviewStatus_Call struct {
	*mock.Call
}

// ChangeReviewStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.ChangeReviewStatusRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) ChangeReviewStatus(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_ChangeReviewStatus_Call {
	return &ProductService_ChangeReviewStatus_Call{Call: _e.mock.On("ChangeReviewStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_ChangeReviewStatus_Call) Run(run func(ctx context.Context, in *product.ChangeReviewStatusRequest, opts ...grpc.CallOption)) *ProductService_ChangeReviewStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.ChangeReviewStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_ChangeReviewStatus_Call) Return(_a0 *product.ChangeReviewStatusResponse, _a1 error) *ProductService_ChangeReviewStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_ChangeReviewStatus_Call) RunAndReturn(run func(context.Context, *product.ChangeReviewStatusRequest, ...grpc.CallOption) (*product.ChangeReviewStatusResponse, error)) *ProductService_ChangeReviewStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCategory provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) CreateCategory(ctx context.Context, in *product.CreateCategoryRequest, opts ...grpc.CallOption) (*product.CreateCategoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 *product.CreateCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateCategoryRequest, ...grpc.CallOption) (*product.CreateCategoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateCategoryRequest, ...grpc.CallOption) *product.CreateCategoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.CreateCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.CreateCategoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type ProductService_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.CreateCategoryRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) CreateCategory(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_CreateCategory_Call {
	return &ProductService_CreateCategory_Call{Call: _e.mock.On("CreateCategory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_CreateCategory_Call) Run(run func(ctx context.Context, in *product.CreateCategoryRequest, opts ...grpc.CallOption)) *ProductService_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.CreateCategoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_CreateCategory_Call) Return(_a0 *product.CreateCategoryResponse, _a1 error) *ProductService_CreateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_CreateCategory_Call) RunAndReturn(run func(context.Context, *product.CreateCategoryRequest, ...grpc.CallOption) (*product.CreateCategoryResponse, error)) *ProductService_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) CreateProduct(ctx context.Context, in *product.CreateProductRequest, opts ...grpc.CallOption) (*product.CreateProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *product.CreateProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateProductRequest, ...grpc.CallOption) (*product.CreateProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateProductRequest, ...grpc.CallOption) *product.CreateProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.CreateProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.CreateProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductService_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.CreateProductRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) CreateProduct(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_CreateProduct_Call {
	return &ProductService_CreateProduct_Call{Call: _e.mock.On("CreateProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_CreateProduct_Call) Run(run func(ctx context.Context, in *product.CreateProductRequest, opts ...grpc.CallOption)) *ProductService_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.CreateProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_CreateProduct_Call) Return(_a0 *product.CreateProductResponse, _a1 error) *ProductService_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_CreateProduct_Call) RunAndReturn(run func(context.Context, *product.CreateProductRequest, ...grpc.CallOption) (*product.CreateProductResponse, error)) *ProductService_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReview provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) CreateReview(ctx context.Context, in *product.CreateReviewRequest, opts ...grpc.CallOption) (*product.CreateReviewResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 *product.CreateReviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateReviewRequest, ...grpc.CallOption) (*product.CreateReviewResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateReviewRequest, ...grpc.CallOption) *product.CreateReviewResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.CreateReviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.CreateReviewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_CreateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReview'
type ProductService_CreateReview_Call struct {
	*mock.Call
}

// CreateReview is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.CreateReviewRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) CreateReview(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_CreateReview_Call {
	return &ProductService_CreateReview_Call{Call: _e.mock.On("CreateReview",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_CreateReview_Call) Run(run func(ctx context.Context, in *product.CreateReviewRequest, opts ...grpc.CallOption)) *ProductService_CreateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.CreateReviewRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_CreateReview_Call) Return(_a0 *product.CreateReviewResponse, _a1 error) *ProductService_CreateReview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_CreateReview_Call) RunAndReturn(run func(context.Context, *product.CreateReviewRequest, ...grpc.CallOption) (*product.CreateReviewResponse, error)) *ProductService_CreateReview_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSku provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) CreateSku(ctx context.Context, in *product.CreateSkuRequest, opts ...grpc.CallOption) (*product.CreateSkuResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSku")
	}

	var r0 *product.CreateSkuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateSkuRequest, ...grpc.CallOption) (*product.CreateSkuResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateSkuRequest, ...grpc.CallOption) *product.CreateSkuResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.CreateSkuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.CreateSkuRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_CreateSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSku'
type ProductService_CreateSku_Call struct {
	*mock.Call
}

// CreateSku is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.CreateSkuRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) CreateSku(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_CreateSku_Call {
	return &ProductService_CreateSku_Call{Call: _e.mock.On("CreateSku",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_CreateSku_Call) Run(run func(ctx context.Context, in *product.CreateSkuRequest, opts ...grpc.CallOption)) *ProductService_CreateSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.CreateSkuRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_CreateSku_Call) Return(_a0 *product.CreateSkuResponse, _a1 error) *ProductService_CreateSku_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_CreateSku_Call) RunAndReturn(run func(context.Context, *product.CreateSkuRequest, ...grpc.CallOption) (*product.CreateSkuResponse, error)) *ProductService_CreateSku_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) DeleteCategory(ctx context.Context, in *product.DeleteCategoryRequest, opts ...grpc.CallOption) (*product.DeleteCategoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 *product.DeleteCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteCategoryRequest, ...grpc.CallOption) (*product.DeleteCategoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteCategoryRequest, ...grpc.CallOption) *product.DeleteCategoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DeleteCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.DeleteCategoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type ProductService_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.DeleteCategoryRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) DeleteCategory(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_DeleteCategory_Call {
	return &ProductService_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_DeleteCategory_Call) Run(run func(ctx context.Context, in *product.DeleteCategoryRequest, opts ...grpc.CallOption)) *ProductService_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.DeleteCategoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_DeleteCategory_Call) Return(_a0 *product.DeleteCategoryResponse, _a1 error) *ProductService_DeleteCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_DeleteCategory_Call) RunAndReturn(run func(context.Context, *product.DeleteCategoryRequest, ...grpc.CallOption) (*product.DeleteCategoryResponse, error)) *ProductService_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) DeleteProduct(ctx context.Context, in *product.DeleteProductRequest, opts ...grpc.CallOption) (*product.DeleteProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 *product.DeleteProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteProductRequest, ...grpc.CallOption) (*product.DeleteProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteProductRequest, ...grpc.CallOption) *product.DeleteProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DeleteProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.DeleteProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type ProductService_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.DeleteProductRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) DeleteProduct(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_DeleteProduct_Call {
	return &ProductService_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_DeleteProduct_Call) Run(run func(ctx context.Context, in *product.DeleteProductRequest, opts ...grpc.CallOption)) *ProductService_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.DeleteProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_DeleteProduct_Call) Return(_a0 *product.DeleteProductResponse, _a1 error) *ProductService_DeleteProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_DeleteProduct_Call) RunAndReturn(run func(context.Context, *product.DeleteProductRequest, ...grpc.CallOption) (*product.DeleteProductResponse, error)) *ProductService_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReview provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) DeleteReview(ctx context.Context, in *product.DeleteReviewRequest, opts ...grpc.CallOption) (*product.DeleteReviewResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReview")
	}

	var r0 *product.DeleteReviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteReviewRequest, ...grpc.CallOption) (*product.DeleteReviewResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteReviewRequest, ...grpc.CallOption) *product.DeleteReviewResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DeleteReviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.DeleteReviewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_DeleteReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReview'
type ProductService_DeleteReview_Call struct {
	*mock.Call
}

// DeleteReview is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.DeleteReviewRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) DeleteReview(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_DeleteReview_Call {
	return &ProductService_DeleteReview_Call{Call: _e.mock.On("DeleteReview",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_DeleteReview_Call) Run(run func(ctx context.Context, in *product.DeleteReviewRequest, opts ...grpc.CallOption)) *ProductService_DeleteReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.DeleteReviewRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_DeleteReview_Call) Return(_a0 *product.DeleteReviewResponse, _a1 error) *ProductService_DeleteReview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_DeleteReview_Call) RunAndReturn(run func(context.Context, *product.DeleteReviewRequest, ...grpc.CallOption) (*product.DeleteReviewResponse, error)) *ProductService_DeleteReview_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSku provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) DeleteSku(ctx context.Context, in *product.DeleteSkuRequest, opts ...grpc.CallOption) (*product.DeleteSkuResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSku")
	}

	var r0 *product.DeleteSkuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteSkuRequest, ...grpc.CallOption) (*product.DeleteSkuResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteSkuRequest, ...grpc.CallOption) *product.DeleteSkuResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DeleteSkuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.DeleteSkuRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_DeleteSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSku'
type ProductService_DeleteSku_Call struct {
	*mock.Call
}

// DeleteSku is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.DeleteSkuRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) DeleteSku(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_DeleteSku_Call {
	return &ProductService_DeleteSku_Call{Call: _e.mock.On("DeleteSku",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_DeleteSku_Call) Run(run func(ctx context.Context, in *product.DeleteSkuRequest, opts ...grpc.CallOption)) *ProductService_DeleteSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.DeleteSkuRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_DeleteSku_Call) Return(_a0 *product.DeleteSkuResponse, _a1 error) *ProductService_DeleteSku_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_DeleteSku_Call) RunAndReturn(run func(context.Context, *product.DeleteSkuRequest, ...grpc.CallOption) (*product.DeleteSkuResponse, error)) *ProductService_DeleteSku_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategories provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) GetCategories(ctx context.Context, in *product.Empty, opts ...grpc.CallOption) (*product.GetCategoriesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCategories")
	}

	var r0 *product.GetCategoriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.Empty, ...grpc.CallOption) (*product.GetCategoriesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.Empty, ...grpc.CallOption) *product.GetCategoriesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.GetCategoriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_GetCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategories'
type ProductService_GetCategories_Call struct {
	*mock.Call
}

// GetCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.Empty
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) GetCategories(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_GetCategories_Call {
	return &ProductService_GetCategories_Call{Call: _e.mock.On("GetCategories",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_GetCategories_Call) Run(run func(ctx context.Context, in *product.Empty, opts ...grpc.CallOption)) *ProductService_GetCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.Empty), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_GetCategories_Call) Return(_a0 *product.GetCategoriesResponse, _a1 error) *ProductService_GetCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_GetCategories_Call) RunAndReturn(run func(context.Context, *product.Empty, ...grpc.CallOption) (*product.GetCategoriesResponse, error)) *ProductService_GetCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategory provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) GetCategory(ctx context.Context, in *product.GetCategoryRequest, opts ...grpc.CallOption) (*product.GetCategoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 *product.GetCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetCategoryRequest, ...grpc.CallOption) (*product.GetCategoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetCategoryRequest, ...grpc.CallOption) *product.GetCategoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.GetCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.GetCategoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_GetCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategory'
type ProductService_GetCategory_Call struct {
	*mock.Call
}

// GetCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.GetCategoryRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) GetCategory(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_GetCategory_Call {
	return &ProductService_GetCategory_Call{Call: _e.mock.On("GetCategory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_GetCategory_Call) Run(run func(ctx context.Context, in *product.GetCategoryRequest, opts ...grpc.CallOption)) *ProductService_GetCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.GetCategoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_GetCategory_Call) Return(_a0 *product.GetCategoryResponse, _a1 error) *ProductService_GetCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_GetCategory_Call) RunAndReturn(run func(context.Context, *product.GetCategoryRequest, ...grpc.CallOption) (*product.GetCategoryResponse, error)) *ProductService_GetCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) GetProduct(ctx context.Context, in *product.GetProductRequest, opts ...grpc.CallOption) (*product.GetProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *product.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetProductRequest, ...grpc.CallOption) (*product.GetProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetProductRequest, ...grpc.CallOption) *product.GetProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.GetProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type ProductService_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.GetProductRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) GetProduct(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_GetProduct_Call {
	return &ProductService_GetProduct_Call{Call: _e.mock.On("GetProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_GetProduct_Call) Run(run func(ctx context.Context, in *product.GetProductRequest, opts ...grpc.CallOption)) *ProductService_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.GetProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_GetProduct_Call) Return(_a0 *product.GetProductResponse, _a1 error) *ProductService_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_GetProduct_Call) RunAndReturn(run func(context.Context, *product.GetProductRequest, ...grpc.CallOption) (*product.GetProductResponse, error)) *ProductService_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetSku provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) GetSku(ctx context.Context, in *product.GetSkuRequest, opts ...grpc.CallOption) (*product.GetSkuResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSku")
	}

	var r0 *product.GetSkuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetSkuRequest, ...grpc.CallOption) (*product.GetSkuResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetSkuRequest, ...grpc.CallOption) *product.GetSkuResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.GetSkuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.GetSkuRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_GetSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSku'
type ProductService_GetSku_Call struct {
	*mock.Call
}

// GetSku is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.GetSkuRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) GetSku(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_GetSku_Call {
	return &ProductService_GetSku_Call{Call: _e.mock.On("GetSku",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_GetSku_Call) Run(run func(ctx context.Context, in *product.GetSkuRequest, opts ...grpc.CallOption)) *ProductService_GetSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.GetSkuRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_GetSku_Call) Return(_a0 *product.GetSkuResponse, _a1 error) *ProductService_GetSku_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_GetSku_Call) RunAndReturn(run func(context.Context, *product.GetSkuRequest, ...grpc.CallOption) (*product.GetSkuResponse, error)) *ProductService_GetSku_Call {
	_c.Call.Return(run)
	return _c
}

// ListCategories provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) ListCategories(ctx context.Context, in *product.ListCategoriesRequest, opts ...grpc.CallOption) (*product.ListCategoriesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 *product.ListCategoriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListCategoriesRequest, ...grpc.CallOption) (*product.ListCategoriesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListCategoriesRequest, ...grpc.CallOption) *product.ListCategoriesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ListCategoriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.ListCategoriesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_ListCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCategories'
type ProductService_ListCategories_Call struct {
	*mock.Call
}

// ListCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.ListCategoriesRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) ListCategories(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_ListCategories_Call {
	return &ProductService_ListCategories_Call{Call: _e.mock.On("ListCategories",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_ListCategories_Call) Run(run func(ctx context.Context, in *product.ListCategoriesRequest, opts ...grpc.CallOption)) *ProductService_ListCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.ListCategoriesRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_ListCategories_Call) Return(_a0 *product.ListCategoriesResponse, _a1 error) *ProductService_ListCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_ListCategories_Call) RunAndReturn(run func(context.Context, *product.ListCategoriesRequest, ...grpc.CallOption) (*product.ListCategoriesResponse, error)) *ProductService_ListCategories_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) ListProducts(ctx context.Context, in *product.ListProductsRequest, opts ...grpc.CallOption) (*product.ListProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 *product.ListProductsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListProductsRequest, ...grpc.CallOption) (*product.ListProductsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListProductsRequest, ...grpc.CallOption) *product.ListProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ListProductsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.ListProductsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type ProductService_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.ListProductsRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) ListProducts(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_ListProducts_Call {
	return &ProductService_ListProducts_Call{Call: _e.mock.On("ListProducts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_ListProducts_Call) Run(run func(ctx context.Context, in *product.ListProductsRequest, opts ...grpc.CallOption)) *ProductService_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.ListProductsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_ListProducts_Call) Return(_a0 *product.ListProductsResponse, _a1 error) *ProductService_ListProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_ListProducts_Call) RunAndReturn(run func(context.Context, *product.ListProductsRequest, ...grpc.CallOption) (*product.ListProductsResponse, error)) *ProductService_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// ListReviews provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) ListReviews(ctx context.Context, in *product.ListReviewsRequest, opts ...grpc.CallOption) (*product.ListReviewsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReviews")
	}

	var r0 *product.ListReviewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListReviewsRequest, ...grpc.CallOption) (*product.ListReviewsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListReviewsRequest, ...grpc.CallOption) *product.ListReviewsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ListReviewsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.ListReviewsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_ListReviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReviews'
type ProductService_ListReviews_Call struct {
	*mock.Call
}

// ListReviews is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.ListReviewsRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) ListReviews(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_ListReviews_Call {
	return &ProductService_ListReviews_Call{Call: _e.mock.On("ListReviews",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_ListReviews_Call) Run(run func(ctx context.Context, in *product.ListReviewsRequest, opts ...grpc.CallOption)) *ProductService_ListReviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.ListReviewsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_ListReviews_Call) Return(_a0 *product.ListReviewsResponse, _a1 error) *ProductService_ListReviews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_ListReviews_Call) RunAndReturn(run func(context.Context, *product.ListReviewsRequest, ...grpc.CallOption) (*product.ListReviewsResponse, error)) *ProductService_ListReviews_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkus provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) ListSkus(ctx context.Context, in *product.ListSkusRequest, opts ...grpc.CallOption) (*product.ListSkusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkus")
	}

	var r0 *product.ListSkusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListSkusRequest, ...grpc.CallOption) (*product.ListSkusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListSkusRequest, ...grpc.CallOption) *product.ListSkusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ListSkusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.ListSkusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_ListSkus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkus'
type ProductService_ListSkus_Call struct {
	*mock.Call
}

// ListSkus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.ListSkusRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) ListSkus(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_ListSkus_Call {
	return &ProductService_ListSkus_Call{Call: _e.mock.On("ListSkus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_ListSkus_Call) Run(run func(ctx context.Context, in *product.ListSkusRequest, opts ...grpc.CallOption)) *ProductService_ListSkus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.ListSkusRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_ListSkus_Call) Return(_a0 *product.ListSkusResponse, _a1 error) *ProductService_ListSkus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_ListSkus_Call) RunAndReturn(run func(context.Context, *product.ListSkusRequest, ...grpc.CallOption) (*product.ListSkusResponse, error)) *ProductService_ListSkus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateCategory(ctx context.Context, in *product.UpdateCategoryRequest, opts ...grpc.CallOption) (*product.UpdateCategoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 *product.UpdateCategoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateCategoryRequest, ...grpc.CallOption) (*product.UpdateCategoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateCategoryRequest, ...grpc.CallOption) *product.UpdateCategoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateCategoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateCategoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type ProductService_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateCategoryRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateCategory(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateCategory_Call {
	return &ProductService_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateCategory_Call) Run(run func(ctx context.Context, in *product.UpdateCategoryRequest, opts ...grpc.CallOption)) *ProductService_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateCategoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateCategory_Call) Return(_a0 *product.UpdateCategoryResponse, _a1 error) *ProductService_UpdateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateCategory_Call) RunAndReturn(run func(context.Context, *product.UpdateCategoryRequest, ...grpc.CallOption) (*product.UpdateCategoryResponse, error)) *ProductService_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateProduct(ctx context.Context, in *product.UpdateProductRequest, opts ...grpc.CallOption) (*product.UpdateProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *product.UpdateProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductRequest, ...grpc.CallOption) (*product.UpdateProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductRequest, ...grpc.CallOption) *product.UpdateProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type ProductService_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateProductRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateProduct(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateProduct_Call {
	return &ProductService_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateProduct_Call) Run(run func(ctx context.Context, in *product.UpdateProductRequest, opts ...grpc.CallOption)) *ProductService_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateProduct_Call) Return(_a0 *product.UpdateProductResponse, _a1 error) *ProductService_UpdateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateProduct_Call) RunAndReturn(run func(context.Context, *product.UpdateProductRequest, ...grpc.CallOption) (*product.UpdateProductResponse, error)) *ProductService_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProductPrice provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateProductPrice(ctx context.Context, in *product.UpdateProductPriceRequest, opts ...grpc.CallOption) (*product.UpdateProductPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductPrice")
	}

	var r0 *product.UpdateProductPriceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductPriceRequest, ...grpc.CallOption) (*product.UpdateProductPriceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductPriceRequest, ...grpc.CallOption) *product.UpdateProductPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateProductPriceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateProductPriceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateProductPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProductPrice'
type ProductService_UpdateProductPrice_Call struct {
	*mock.Call
}

// UpdateProductPrice is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateProductPriceRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateProductPrice(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateProductPrice_Call {
	return &ProductService_UpdateProductPrice_Call{Call: _e.mock.On("UpdateProductPrice",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateProductPrice_Call) Run(run func(ctx context.Context, in *product.UpdateProductPriceRequest, opts ...grpc.CallOption)) *ProductService_UpdateProductPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateProductPriceRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateProductPrice_Call) Return(_a0 *product.UpdateProductPriceResponse, _a1 error) *ProductService_UpdateProductPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateProductPrice_Call) RunAndReturn(run func(context.Context, *product.UpdateProductPriceRequest, ...grpc.CallOption) (*product.UpdateProductPriceResponse, error)) *ProductService_UpdateProductPrice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProductSales provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateProductSales(ctx context.Context, in *product.UpdateProductSalesRequest, opts ...grpc.CallOption) (*product.UpdateProductSalesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductSales")
	}

	var r0 *product.UpdateProductSalesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductSalesRequest, ...grpc.CallOption) (*product.UpdateProductSalesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductSalesRequest, ...grpc.CallOption) *product.UpdateProductSalesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateProductSalesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateProductSalesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateProductSales_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProductSales'
type ProductService_UpdateProductSales_Call struct {
	*mock.Call
}

// UpdateProductSales is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateProductSalesRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateProductSales(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateProductSales_Call {
	return &ProductService_UpdateProductSales_Call{Call: _e.mock.On("UpdateProductSales",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateProductSales_Call) Run(run func(ctx context.Context, in *product.UpdateProductSalesRequest, opts ...grpc.CallOption)) *ProductService_UpdateProductSales_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateProductSalesRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateProductSales_Call) Return(_a0 *product.UpdateProductSalesResponse, _a1 error) *ProductService_UpdateProductSales_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateProductSales_Call) RunAndReturn(run func(context.Context, *product.UpdateProductSalesRequest, ...grpc.CallOption) (*product.UpdateProductSalesResponse, error)) *ProductService_UpdateProductSales_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProductStatus provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateProductStatus(ctx context.Context, in *product.UpdateProductStatusRequest, opts ...grpc.CallOption) (*product.UpdateProductStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductStatus")
	}

	var r0 *product.UpdateProductStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductStatusRequest, ...grpc.CallOption) (*product.UpdateProductStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductStatusRequest, ...grpc.CallOption) *product.UpdateProductStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateProductStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateProductStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateProductStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProductStatus'
type ProductService_UpdateProductStatus_Call struct {
	*mock.Call
}

// UpdateProductStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateProductStatusRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateProductStatus(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateProductStatus_Call {
	return &ProductService_UpdateProductStatus_Call{Call: _e.mock.On("UpdateProductStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateProductStatus_Call) Run(run func(ctx context.Context, in *product.UpdateProductStatusRequest, opts ...grpc.CallOption)) *ProductService_UpdateProductStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateProductStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateProductStatus_Call) Return(_a0 *product.UpdateProductStatusResponse, _a1 error) *ProductService_UpdateProductStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateProductStatus_Call) RunAndReturn(run func(context.Context, *product.UpdateProductStatusRequest, ...grpc.CallOption) (*product.UpdateProductStatusResponse, error)) *ProductService_UpdateProductStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReview provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateReview(ctx context.Context, in *product.UpdateReviewRequest, opts ...grpc.CallOption) (*product.UpdateReviewResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 *product.UpdateReviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateReviewRequest, ...grpc.CallOption) (*product.UpdateReviewResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateReviewRequest, ...grpc.CallOption) *product.UpdateReviewResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateReviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateReviewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReview'
type ProductService_UpdateReview_Call struct {
	*mock.Call
}

// UpdateReview is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateReviewRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateReview(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateReview_Call {
	return &ProductService_UpdateReview_Call{Call: _e.mock.On("UpdateReview",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateReview_Call) Run(run func(ctx context.Context, in *product.UpdateReviewRequest, opts ...grpc.CallOption)) *ProductService_UpdateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateReviewRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateReview_Call) Return(_a0 *product.UpdateReviewResponse, _a1 error) *ProductService_UpdateReview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateReview_Call) RunAndReturn(run func(context.Context, *product.UpdateReviewRequest, ...grpc.CallOption) (*product.UpdateReviewResponse, error)) *ProductService_UpdateReview_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSkuPrice provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateSkuPrice(ctx context.Context, in *product.UpdateSkuPriceRequest, opts ...grpc.CallOption) (*product.UpdateSkuPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSkuPrice")
	}

	var r0 *product.UpdateSkuPriceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateSkuPriceRequest, ...grpc.CallOption) (*product.UpdateSkuPriceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateSkuPriceRequest, ...grpc.CallOption) *product.UpdateSkuPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateSkuPriceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateSkuPriceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateSkuPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSkuPrice'
type ProductService_UpdateSkuPrice_Call struct {
	*mock.Call
}

// UpdateSkuPrice is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateSkuPriceRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateSkuPrice(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateSkuPrice_Call {
	return &ProductService_UpdateSkuPrice_Call{Call: _e.mock.On("UpdateSkuPrice",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateSkuPrice_Call) Run(run func(ctx context.Context, in *product.UpdateSkuPriceRequest, opts ...grpc.CallOption)) *ProductService_UpdateSkuPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateSkuPriceRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateSkuPrice_Call) Return(_a0 *product.UpdateSkuPriceResponse, _a1 error) *ProductService_UpdateSkuPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateSkuPrice_Call) RunAndReturn(run func(context.Context, *product.UpdateSkuPriceRequest, ...grpc.CallOption) (*product.UpdateSkuPriceResponse, error)) *ProductService_UpdateSkuPrice_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSkuSales provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateSkuSales(ctx context.Context, in *product.UpdateSkuSalesRequest, opts ...grpc.CallOption) (*product.UpdateSkuSalesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSkuSales")
	}

	var r0 *product.UpdateSkuSalesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateSkuSalesRequest, ...grpc.CallOption) (*product.UpdateSkuSalesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateSkuSalesRequest, ...grpc.CallOption) *product.UpdateSkuSalesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateSkuSalesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateSkuSalesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateSkuSales_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSkuSales'
type ProductService_UpdateSkuSales_Call struct {
	*mock.Call
}

// UpdateSkuSales is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateSkuSalesRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateSkuSales(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateSkuSales_Call {
	return &ProductService_UpdateSkuSales_Call{Call: _e.mock.On("UpdateSkuSales",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateSkuSales_Call) Run(run func(ctx context.Context, in *product.UpdateSkuSalesRequest, opts ...grpc.CallOption)) *ProductService_UpdateSkuSales_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateSkuSalesRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateSkuSales_Call) Return(_a0 *product.UpdateSkuSalesResponse, _a1 error) *ProductService_UpdateSkuSales_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateSkuSales_Call) RunAndReturn(run func(context.Context, *product.UpdateSkuSalesRequest, ...grpc.CallOption) (*product.UpdateSkuSalesResponse, error)) *ProductService_UpdateSkuSales_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSkuStock provides a mock function with given fields: ctx, in, opts
func (_m *ProductService) UpdateSkuStock(ctx context.Context, in *product.UpdateSkuStockRequest, opts ...grpc.CallOption) (*product.UpdateSkuStockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSkuStock")
	}

	var r0 *product.UpdateSkuStockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateSkuStockRequest, ...grpc.CallOption) (*product.UpdateSkuStockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateSkuStockRequest, ...grpc.CallOption) *product.UpdateSkuStockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateSkuStockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateSkuStockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_UpdateSkuStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSkuStock'
type ProductService_UpdateSkuStock_Call struct {
	*mock.Call
}

// UpdateSkuStock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *product.UpdateSkuStockRequest
//   - opts ...grpc.CallOption
func (_e *ProductService_Expecter) UpdateSkuStock(ctx interface{}, in interface{}, opts ...interface{}) *ProductService_UpdateSkuStock_Call {
	return &ProductService_UpdateSkuStock_Call{Call: _e.mock.On("UpdateSkuStock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductService_UpdateSkuStock_Call) Run(run func(ctx context.Context, in *product.UpdateSkuStockRequest, opts ...grpc.CallOption)) *ProductService_UpdateSkuStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*product.UpdateSkuStockRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductService_UpdateSkuStock_Call) Return(_a0 *product.UpdateSkuStockResponse, _a1 error) *ProductService_UpdateSkuStock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_UpdateSkuStock_Call) RunAndReturn(run func(context.Context, *product.UpdateSkuStockRequest, ...grpc.CallOption) (*product.UpdateSkuStockResponse, error)) *ProductService_UpdateSkuStock_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
