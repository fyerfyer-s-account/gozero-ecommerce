// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.4

package handler

import (
	"net/http"

	cart "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/cart"
	order "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/order"
	payment "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/payment"
	product "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/product"
	user "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/user"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: HealthCheckHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/api/cart",
					Handler: cart.GetCartHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/cart/items",
					Handler: cart.AddCartItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/cart/items/:id",
					Handler: cart.UpdateCartItemHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/cart/items/:id",
					Handler: cart.DeleteCartItemHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/cart/items/select",
					Handler: cart.SelectCartItemsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/cart/items/unselect",
					Handler: cart.UnselectCartItemsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/cart/selected",
					Handler: cart.GetSelectedItemsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/orders",
					Handler: order.CreateOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/orders",
					Handler: order.ListOrdersHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/orders/:id",
					Handler: order.GetOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/orders/:id/cancel",
					Handler: order.CancelOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/orders/:id/confirm",
					Handler: order.ConfirmReceivedHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/orders/:id/refund",
					Handler: order.CreateRefundHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/payments",
					Handler: payment.CreatePaymentHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/payments/:paymentNo/status",
					Handler: payment.GetPaymentStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/refunds/:refundNo/status",
					Handler: payment.GetRefundStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/payments/notify",
				Handler: payment.PaymentNotifyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/refunds/notify",
				Handler: payment.RefundNotifyHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/categories",
				Handler: product.GetCategoriesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products/:id",
				Handler: product.GetProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products/:id/reviews",
				Handler: product.GetProductReviewsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products/:id/skus",
				Handler: product.GetProductSkusHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/products/reviews/:id",
				Handler: product.UpdateReviewHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products/search",
				Handler: product.SearchProductsHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AdminAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/admin/categories",
					Handler: product.CreateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/admin/categories/:id",
					Handler: product.UpdateCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/admin/categories/:id",
					Handler: product.DeleteCategoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/admin/products",
					Handler: product.CreateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/admin/products/:id",
					Handler: product.UpdateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/admin/products/:id",
					Handler: product.DeleteProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/admin/products/:id/price",
					Handler: product.UpdateProductPriceHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/admin/products/:id/status",
					Handler: product.UpdateProductStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/admin/products/:productId/skus",
					Handler: product.CreateSkuHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/admin/products/skus/:id/price",
					Handler: product.UpdateSkuPriceHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/admin/products/skus/:id/stock",
					Handler: product.UpdateSkuStockHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/admin/reviews/:id",
					Handler: product.DeleteReviewHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/admin/reviews/:id/status",
					Handler: product.ChangeReviewStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/user/addresses",
					Handler: user.AddAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/user/addresses",
					Handler: user.ListAddressesHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/user/addresses/:id",
					Handler: user.UpdateAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/user/addresses/:id",
					Handler: user.DeleteAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/user/logout",
					Handler: user.LogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/user/password/change",
					Handler: user.ChangePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/user/password/reset",
					Handler: user.ResetPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/user/profile",
					Handler: user.GetProfileHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/user/profile",
					Handler: user.UpdateProfileHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/user/wallet",
					Handler: user.GetWalletHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/user/wallet/recharge",
					Handler: user.RechargeWalletHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/user/wallet/transactions",
					Handler: user.GetWalletTransactionsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
