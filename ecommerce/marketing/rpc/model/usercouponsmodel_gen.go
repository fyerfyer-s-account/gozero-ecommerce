// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCouponsFieldNames          = builder.RawFieldNames(&UserCoupons{})
	userCouponsRows                = strings.Join(userCouponsFieldNames, ",")
	userCouponsRowsExpectAutoSet   = strings.Join(stringx.Remove(userCouponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userCouponsRowsWithPlaceHolder = strings.Join(stringx.Remove(userCouponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userCouponsModel interface {
		Insert(ctx context.Context, data *UserCoupons) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserCoupons, error)
		Update(ctx context.Context, data *UserCoupons) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserCouponsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserCoupons struct {
		Id        uint64         `db:"id"`         // ID
		UserId    uint64         `db:"user_id"`    // ç”¨æˆ·ID
		CouponId  uint64         `db:"coupon_id"`  // ä¼˜æƒ åˆ¸ID
		Status    int64          `db:"status"`     // çŠ¶æ€ 0:æœªä½¿ç”¨ 1:å·²ä½¿ç”¨ 2:å·²è¿‡æœŸ
		UsedTime  sql.NullTime   `db:"used_time"`  // ä½¿ç”¨æ—¶é—´
		OrderNo   sql.NullString `db:"order_no"`   // è®¢å•å·
		CreatedAt time.Time      `db:"created_at"` // åˆ›å»ºæ—¶é—´
	}
)

func newUserCouponsModel(conn sqlx.SqlConn) *defaultUserCouponsModel {
	return &defaultUserCouponsModel{
		conn:  conn,
		table: "`user_coupons`",
	}
}

func (m *defaultUserCouponsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserCouponsModel) FindOne(ctx context.Context, id uint64) (*UserCoupons, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCouponsRows, m.table)
	var resp UserCoupons
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCouponsModel) Insert(ctx context.Context, data *UserCoupons) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userCouponsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CouponId, data.Status, data.UsedTime, data.OrderNo)
	return ret, err
}

func (m *defaultUserCouponsModel) Update(ctx context.Context, data *UserCoupons) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCouponsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CouponId, data.Status, data.UsedTime, data.OrderNo, data.Id)
	return err
}

func (m *defaultUserCouponsModel) tableName() string {
	return m.table
}
