// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/fyerfyer/gozero-ecommerce/ecommerce/payment/rpc/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// PaymentOrdersModel is an autogenerated mock type for the PaymentOrdersModel type
type PaymentOrdersModel struct {
	mock.Mock
}

type PaymentOrdersModel_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentOrdersModel) EXPECT() *PaymentOrdersModel_Expecter {
	return &PaymentOrdersModel_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PaymentOrdersModel) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrdersModel_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PaymentOrdersModel_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *PaymentOrdersModel_Expecter) Delete(ctx interface{}, id interface{}) *PaymentOrdersModel_Delete_Call {
	return &PaymentOrdersModel_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PaymentOrdersModel_Delete_Call) Run(run func(ctx context.Context, id uint64)) *PaymentOrdersModel_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PaymentOrdersModel_Delete_Call) Return(_a0 error) *PaymentOrdersModel_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrdersModel_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *PaymentOrdersModel_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOrderNo provides a mock function with given fields: ctx, orderNo
func (_m *PaymentOrdersModel) FindByOrderNo(ctx context.Context, orderNo string) ([]*model.PaymentOrders, error) {
	ret := _m.Called(ctx, orderNo)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrderNo")
	}

	var r0 []*model.PaymentOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.PaymentOrders, error)); ok {
		return rf(ctx, orderNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.PaymentOrders); ok {
		r0 = rf(ctx, orderNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PaymentOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrdersModel_FindByOrderNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrderNo'
type PaymentOrdersModel_FindByOrderNo_Call struct {
	*mock.Call
}

// FindByOrderNo is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNo string
func (_e *PaymentOrdersModel_Expecter) FindByOrderNo(ctx interface{}, orderNo interface{}) *PaymentOrdersModel_FindByOrderNo_Call {
	return &PaymentOrdersModel_FindByOrderNo_Call{Call: _e.mock.On("FindByOrderNo", ctx, orderNo)}
}

func (_c *PaymentOrdersModel_FindByOrderNo_Call) Run(run func(ctx context.Context, orderNo string)) *PaymentOrdersModel_FindByOrderNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PaymentOrdersModel_FindByOrderNo_Call) Return(_a0 []*model.PaymentOrders, _a1 error) *PaymentOrdersModel_FindByOrderNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrdersModel_FindByOrderNo_Call) RunAndReturn(run func(context.Context, string) ([]*model.PaymentOrders, error)) *PaymentOrdersModel_FindByOrderNo_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPaymentNo provides a mock function with given fields: ctx, paymentNo
func (_m *PaymentOrdersModel) FindByPaymentNo(ctx context.Context, paymentNo string) ([]*model.PaymentOrders, error) {
	ret := _m.Called(ctx, paymentNo)

	if len(ret) == 0 {
		panic("no return value specified for FindByPaymentNo")
	}

	var r0 []*model.PaymentOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.PaymentOrders, error)); ok {
		return rf(ctx, paymentNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.PaymentOrders); ok {
		r0 = rf(ctx, paymentNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PaymentOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrdersModel_FindByPaymentNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPaymentNo'
type PaymentOrdersModel_FindByPaymentNo_Call struct {
	*mock.Call
}

// FindByPaymentNo is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentNo string
func (_e *PaymentOrdersModel_Expecter) FindByPaymentNo(ctx interface{}, paymentNo interface{}) *PaymentOrdersModel_FindByPaymentNo_Call {
	return &PaymentOrdersModel_FindByPaymentNo_Call{Call: _e.mock.On("FindByPaymentNo", ctx, paymentNo)}
}

func (_c *PaymentOrdersModel_FindByPaymentNo_Call) Run(run func(ctx context.Context, paymentNo string)) *PaymentOrdersModel_FindByPaymentNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PaymentOrdersModel_FindByPaymentNo_Call) Return(_a0 []*model.PaymentOrders, _a1 error) *PaymentOrdersModel_FindByPaymentNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrdersModel_FindByPaymentNo_Call) RunAndReturn(run func(context.Context, string) ([]*model.PaymentOrders, error)) *PaymentOrdersModel_FindByPaymentNo_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserId provides a mock function with given fields: ctx, userId
func (_m *PaymentOrdersModel) FindByUserId(ctx context.Context, userId uint64) ([]*model.PaymentOrders, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 []*model.PaymentOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]*model.PaymentOrders, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []*model.PaymentOrders); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PaymentOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrdersModel_FindByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserId'
type PaymentOrdersModel_FindByUserId_Call struct {
	*mock.Call
}

// FindByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uint64
func (_e *PaymentOrdersModel_Expecter) FindByUserId(ctx interface{}, userId interface{}) *PaymentOrdersModel_FindByUserId_Call {
	return &PaymentOrdersModel_FindByUserId_Call{Call: _e.mock.On("FindByUserId", ctx, userId)}
}

func (_c *PaymentOrdersModel_FindByUserId_Call) Run(run func(ctx context.Context, userId uint64)) *PaymentOrdersModel_FindByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PaymentOrdersModel_FindByUserId_Call) Return(_a0 []*model.PaymentOrders, _a1 error) *PaymentOrdersModel_FindByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrdersModel_FindByUserId_Call) RunAndReturn(run func(context.Context, uint64) ([]*model.PaymentOrders, error)) *PaymentOrdersModel_FindByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *PaymentOrdersModel) FindOne(ctx context.Context, id uint64) (*model.PaymentOrders, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *model.PaymentOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.PaymentOrders, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.PaymentOrders); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrdersModel_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type PaymentOrdersModel_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *PaymentOrdersModel_Expecter) FindOne(ctx interface{}, id interface{}) *PaymentOrdersModel_FindOne_Call {
	return &PaymentOrdersModel_FindOne_Call{Call: _e.mock.On("FindOne", ctx, id)}
}

func (_c *PaymentOrdersModel_FindOne_Call) Run(run func(ctx context.Context, id uint64)) *PaymentOrdersModel_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PaymentOrdersModel_FindOne_Call) Return(_a0 *model.PaymentOrders, _a1 error) *PaymentOrdersModel_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrdersModel_FindOne_Call) RunAndReturn(run func(context.Context, uint64) (*model.PaymentOrders, error)) *PaymentOrdersModel_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByPaymentNo provides a mock function with given fields: ctx, paymentNo
func (_m *PaymentOrdersModel) FindOneByPaymentNo(ctx context.Context, paymentNo string) (*model.PaymentOrders, error) {
	ret := _m.Called(ctx, paymentNo)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByPaymentNo")
	}

	var r0 *model.PaymentOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.PaymentOrders, error)); ok {
		return rf(ctx, paymentNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.PaymentOrders); ok {
		r0 = rf(ctx, paymentNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrdersModel_FindOneByPaymentNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByPaymentNo'
type PaymentOrdersModel_FindOneByPaymentNo_Call struct {
	*mock.Call
}

// FindOneByPaymentNo is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentNo string
func (_e *PaymentOrdersModel_Expecter) FindOneByPaymentNo(ctx interface{}, paymentNo interface{}) *PaymentOrdersModel_FindOneByPaymentNo_Call {
	return &PaymentOrdersModel_FindOneByPaymentNo_Call{Call: _e.mock.On("FindOneByPaymentNo", ctx, paymentNo)}
}

func (_c *PaymentOrdersModel_FindOneByPaymentNo_Call) Run(run func(ctx context.Context, paymentNo string)) *PaymentOrdersModel_FindOneByPaymentNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PaymentOrdersModel_FindOneByPaymentNo_Call) Return(_a0 *model.PaymentOrders, _a1 error) *PaymentOrdersModel_FindOneByPaymentNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrdersModel_FindOneByPaymentNo_Call) RunAndReturn(run func(context.Context, string) (*model.PaymentOrders, error)) *PaymentOrdersModel_FindOneByPaymentNo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentsByStatus provides a mock function with given fields: ctx, status
func (_m *PaymentOrdersModel) GetPaymentsByStatus(ctx context.Context, status int64) ([]*model.PaymentOrders, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentsByStatus")
	}

	var r0 []*model.PaymentOrders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.PaymentOrders, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.PaymentOrders); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PaymentOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrdersModel_GetPaymentsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentsByStatus'
type PaymentOrdersModel_GetPaymentsByStatus_Call struct {
	*mock.Call
}

// GetPaymentsByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status int64
func (_e *PaymentOrdersModel_Expecter) GetPaymentsByStatus(ctx interface{}, status interface{}) *PaymentOrdersModel_GetPaymentsByStatus_Call {
	return &PaymentOrdersModel_GetPaymentsByStatus_Call{Call: _e.mock.On("GetPaymentsByStatus", ctx, status)}
}

func (_c *PaymentOrdersModel_GetPaymentsByStatus_Call) Run(run func(ctx context.Context, status int64)) *PaymentOrdersModel_GetPaymentsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *PaymentOrdersModel_GetPaymentsByStatus_Call) Return(_a0 []*model.PaymentOrders, _a1 error) *PaymentOrdersModel_GetPaymentsByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrdersModel_GetPaymentsByStatus_Call) RunAndReturn(run func(context.Context, int64) ([]*model.PaymentOrders, error)) *PaymentOrdersModel_GetPaymentsByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, data
func (_m *PaymentOrdersModel) Insert(ctx context.Context, data *model.PaymentOrders) (sql.Result, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PaymentOrders) (sql.Result, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PaymentOrders) sql.Result); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PaymentOrders) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrdersModel_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type PaymentOrdersModel_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.PaymentOrders
func (_e *PaymentOrdersModel_Expecter) Insert(ctx interface{}, data interface{}) *PaymentOrdersModel_Insert_Call {
	return &PaymentOrdersModel_Insert_Call{Call: _e.mock.On("Insert", ctx, data)}
}

func (_c *PaymentOrdersModel_Insert_Call) Run(run func(ctx context.Context, data *model.PaymentOrders)) *PaymentOrdersModel_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.PaymentOrders))
	})
	return _c
}

func (_c *PaymentOrdersModel_Insert_Call) Return(_a0 sql.Result, _a1 error) *PaymentOrdersModel_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrdersModel_Insert_Call) RunAndReturn(run func(context.Context, *model.PaymentOrders) (sql.Result, error)) *PaymentOrdersModel_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *PaymentOrdersModel) Update(ctx context.Context, data *model.PaymentOrders) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PaymentOrders) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrdersModel_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PaymentOrdersModel_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.PaymentOrders
func (_e *PaymentOrdersModel_Expecter) Update(ctx interface{}, data interface{}) *PaymentOrdersModel_Update_Call {
	return &PaymentOrdersModel_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *PaymentOrdersModel_Update_Call) Run(run func(ctx context.Context, data *model.PaymentOrders)) *PaymentOrdersModel_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.PaymentOrders))
	})
	return _c
}

func (_c *PaymentOrdersModel_Update_Call) Return(_a0 error) *PaymentOrdersModel_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrdersModel_Update_Call) RunAndReturn(run func(context.Context, *model.PaymentOrders) error) *PaymentOrdersModel_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePartial provides a mock function with given fields: ctx, id, updates
func (_m *PaymentOrdersModel) UpdatePartial(ctx context.Context, id uint64, updates map[string]interface{}) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrdersModel_UpdatePartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePartial'
type PaymentOrdersModel_UpdatePartial_Call struct {
	*mock.Call
}

// UpdatePartial is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
//   - updates map[string]interface{}
func (_e *PaymentOrdersModel_Expecter) UpdatePartial(ctx interface{}, id interface{}, updates interface{}) *PaymentOrdersModel_UpdatePartial_Call {
	return &PaymentOrdersModel_UpdatePartial_Call{Call: _e.mock.On("UpdatePartial", ctx, id, updates)}
}

func (_c *PaymentOrdersModel_UpdatePartial_Call) Run(run func(ctx context.Context, id uint64, updates map[string]interface{})) *PaymentOrdersModel_UpdatePartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *PaymentOrdersModel_UpdatePartial_Call) Return(_a0 error) *PaymentOrdersModel_UpdatePartial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrdersModel_UpdatePartial_Call) RunAndReturn(run func(context.Context, uint64, map[string]interface{}) error) *PaymentOrdersModel_UpdatePartial_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *PaymentOrdersModel) UpdateStatus(ctx context.Context, id uint64, status int64) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrdersModel_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type PaymentOrdersModel_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
//   - status int64
func (_e *PaymentOrdersModel_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *PaymentOrdersModel_UpdateStatus_Call {
	return &PaymentOrdersModel_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *PaymentOrdersModel_UpdateStatus_Call) Run(run func(ctx context.Context, id uint64, status int64)) *PaymentOrdersModel_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(int64))
	})
	return _c
}

func (_c *PaymentOrdersModel_UpdateStatus_Call) Return(_a0 error) *PaymentOrdersModel_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrdersModel_UpdateStatus_Call) RunAndReturn(run func(context.Context, uint64, int64) error) *PaymentOrdersModel_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentOrdersModel creates a new instance of PaymentOrdersModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentOrdersModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentOrdersModel {
	mock := &PaymentOrdersModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
