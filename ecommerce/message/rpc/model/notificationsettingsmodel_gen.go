// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	notificationSettingsFieldNames          = builder.RawFieldNames(&NotificationSettings{})
	notificationSettingsRows                = strings.Join(notificationSettingsFieldNames, ",")
	notificationSettingsRowsExpectAutoSet   = strings.Join(stringx.Remove(notificationSettingsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	notificationSettingsRowsWithPlaceHolder = strings.Join(stringx.Remove(notificationSettingsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallMessageNotificationSettingsIdPrefix                = "cache:mallMessage:notificationSettings:id:"
	cacheMallMessageNotificationSettingsUserIdTypeChannelPrefix = "cache:mallMessage:notificationSettings:userId:type:channel:"
)

type (
	notificationSettingsModel interface {
		Insert(ctx context.Context, data *NotificationSettings) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*NotificationSettings, error)
		FindOneByUserIdTypeChannel(ctx context.Context, userId uint64, tp int64, channel int64) (*NotificationSettings, error)
		Update(ctx context.Context, data *NotificationSettings) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultNotificationSettingsModel struct {
		sqlc.CachedConn
		table string
	}

	NotificationSettings struct {
		Id        uint64    `db:"id"`         // è®¾ç½®ID
		UserId    uint64    `db:"user_id"`    // ç”¨æˆ·ID
		Type      int64     `db:"type"`       // æ¶ˆæ¯ç±»åž‹
		Channel   int64     `db:"channel"`    // é€šçŸ¥æ¸ é“
		IsEnabled int64     `db:"is_enabled"` // æ˜¯å¦å¯ç”¨
		CreatedAt time.Time `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newNotificationSettingsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultNotificationSettingsModel {
	return &defaultNotificationSettingsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`notification_settings`",
	}
}

func (m *defaultNotificationSettingsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	mallMessageNotificationSettingsIdKey := fmt.Sprintf("%s%v", cacheMallMessageNotificationSettingsIdPrefix, id)
	mallMessageNotificationSettingsUserIdTypeChannelKey := fmt.Sprintf("%s%v:%v:%v", cacheMallMessageNotificationSettingsUserIdTypeChannelPrefix, data.UserId, data.Type, data.Channel)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallMessageNotificationSettingsIdKey, mallMessageNotificationSettingsUserIdTypeChannelKey)
	return err
}

func (m *defaultNotificationSettingsModel) FindOne(ctx context.Context, id uint64) (*NotificationSettings, error) {
	mallMessageNotificationSettingsIdKey := fmt.Sprintf("%s%v", cacheMallMessageNotificationSettingsIdPrefix, id)
	var resp NotificationSettings
	err := m.QueryRowCtx(ctx, &resp, mallMessageNotificationSettingsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", notificationSettingsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNotificationSettingsModel) FindOneByUserIdTypeChannel(ctx context.Context, userId uint64, tp int64, channel int64) (*NotificationSettings, error) {
	mallMessageNotificationSettingsUserIdTypeChannelKey := fmt.Sprintf("%s%v:%v:%v", cacheMallMessageNotificationSettingsUserIdTypeChannelPrefix, userId, tp, channel)
	var resp NotificationSettings
	err := m.QueryRowIndexCtx(ctx, &resp, mallMessageNotificationSettingsUserIdTypeChannelKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `type` = ? and `channel` = ? limit 1", notificationSettingsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, tp, channel); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNotificationSettingsModel) Insert(ctx context.Context, data *NotificationSettings) (sql.Result, error) {
	mallMessageNotificationSettingsIdKey := fmt.Sprintf("%s%v", cacheMallMessageNotificationSettingsIdPrefix, data.Id)
	mallMessageNotificationSettingsUserIdTypeChannelKey := fmt.Sprintf("%s%v:%v:%v", cacheMallMessageNotificationSettingsUserIdTypeChannelPrefix, data.UserId, data.Type, data.Channel)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, notificationSettingsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Channel, data.IsEnabled)
	}, mallMessageNotificationSettingsIdKey, mallMessageNotificationSettingsUserIdTypeChannelKey)
	return ret, err
}

func (m *defaultNotificationSettingsModel) Update(ctx context.Context, newData *NotificationSettings) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	mallMessageNotificationSettingsIdKey := fmt.Sprintf("%s%v", cacheMallMessageNotificationSettingsIdPrefix, data.Id)
	mallMessageNotificationSettingsUserIdTypeChannelKey := fmt.Sprintf("%s%v:%v:%v", cacheMallMessageNotificationSettingsUserIdTypeChannelPrefix, data.UserId, data.Type, data.Channel)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, notificationSettingsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Type, newData.Channel, newData.IsEnabled, newData.Id)
	}, mallMessageNotificationSettingsIdKey, mallMessageNotificationSettingsUserIdTypeChannelKey)
	return err
}

func (m *defaultNotificationSettingsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallMessageNotificationSettingsIdPrefix, primary)
}

func (m *defaultNotificationSettingsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", notificationSettingsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNotificationSettingsModel) tableName() string {
	return m.table
}
