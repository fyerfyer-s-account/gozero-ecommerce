// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pointsRecordsFieldNames          = builder.RawFieldNames(&PointsRecords{})
	pointsRecordsRows                = strings.Join(pointsRecordsFieldNames, ",")
	pointsRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(pointsRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pointsRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(pointsRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pointsRecordsModel interface {
		Insert(ctx context.Context, data *PointsRecords) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*PointsRecords, error)
		Update(ctx context.Context, data *PointsRecords) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPointsRecordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PointsRecords struct {
		Id        uint64         `db:"id"`         // è®°å½•ID
		UserId    uint64         `db:"user_id"`    // ç”¨æˆ·ID
		Points    int64          `db:"points"`     // ç§¯åˆ†å˜åŠ¨æ•°é‡
		Type      int64          `db:"type"`       // ç±»åž‹ 1:èŽ·å– 2:ä½¿ç”¨
		Source    string         `db:"source"`     // æ¥æº
		Remark    sql.NullString `db:"remark"`     // å¤‡æ³¨
		OrderNo   sql.NullString `db:"order_no"`   // è®¢å•å·
		CreatedAt time.Time      `db:"created_at"` // åˆ›å»ºæ—¶é—´
	}
)

func newPointsRecordsModel(conn sqlx.SqlConn) *defaultPointsRecordsModel {
	return &defaultPointsRecordsModel{
		conn:  conn,
		table: "`points_records`",
	}
}

func (m *defaultPointsRecordsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPointsRecordsModel) FindOne(ctx context.Context, id uint64) (*PointsRecords, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pointsRecordsRows, m.table)
	var resp PointsRecords
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPointsRecordsModel) Insert(ctx context.Context, data *PointsRecords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, pointsRecordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Points, data.Type, data.Source, data.Remark, data.OrderNo)
	return ret, err
}

func (m *defaultPointsRecordsModel) Update(ctx context.Context, data *PointsRecords) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pointsRecordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Points, data.Type, data.Source, data.Remark, data.OrderNo, data.Id)
	return err
}

func (m *defaultPointsRecordsModel) tableName() string {
	return m.table
}
