// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: search.proto

package search

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Search_SearchProducts_FullMethodName       = "/search.Search/SearchProducts"
	Search_GetHotKeywords_FullMethodName       = "/search.Search/GetHotKeywords"
	Search_GetSearchSuggestions_FullMethodName = "/search.Search/GetSearchSuggestions"
	Search_SaveSearchHistory_FullMethodName    = "/search.Search/SaveSearchHistory"
	Search_GetSearchHistory_FullMethodName     = "/search.Search/GetSearchHistory"
	Search_DeleteSearchHistory_FullMethodName  = "/search.Search/DeleteSearchHistory"
	Search_SyncProduct_FullMethodName          = "/search.Search/SyncProduct"
	Search_RemoveProduct_FullMethodName        = "/search.Search/RemoveProduct"
)

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchClient interface {
	// 商品搜索
	SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error)
	GetHotKeywords(ctx context.Context, in *GetHotKeywordsRequest, opts ...grpc.CallOption) (*GetHotKeywordsResponse, error)
	GetSearchSuggestions(ctx context.Context, in *GetSearchSuggestionsRequest, opts ...grpc.CallOption) (*GetSearchSuggestionsResponse, error)
	SaveSearchHistory(ctx context.Context, in *SaveSearchHistoryRequest, opts ...grpc.CallOption) (*SaveSearchHistoryResponse, error)
	GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error)
	DeleteSearchHistory(ctx context.Context, in *DeleteSearchHistoryRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryResponse, error)
	// 索引管理
	SyncProduct(ctx context.Context, in *SyncProductRequest, opts ...grpc.CallOption) (*SyncProductResponse, error)
	RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*RemoveProductResponse, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProductsResponse)
	err := c.cc.Invoke(ctx, Search_SearchProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetHotKeywords(ctx context.Context, in *GetHotKeywordsRequest, opts ...grpc.CallOption) (*GetHotKeywordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotKeywordsResponse)
	err := c.cc.Invoke(ctx, Search_GetHotKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetSearchSuggestions(ctx context.Context, in *GetSearchSuggestionsRequest, opts ...grpc.CallOption) (*GetSearchSuggestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchSuggestionsResponse)
	err := c.cc.Invoke(ctx, Search_GetSearchSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SaveSearchHistory(ctx context.Context, in *SaveSearchHistoryRequest, opts ...grpc.CallOption) (*SaveSearchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveSearchHistoryResponse)
	err := c.cc.Invoke(ctx, Search_SaveSearchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchHistoryResponse)
	err := c.cc.Invoke(ctx, Search_GetSearchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) DeleteSearchHistory(ctx context.Context, in *DeleteSearchHistoryRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSearchHistoryResponse)
	err := c.cc.Invoke(ctx, Search_DeleteSearchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SyncProduct(ctx context.Context, in *SyncProductRequest, opts ...grpc.CallOption) (*SyncProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncProductResponse)
	err := c.cc.Invoke(ctx, Search_SyncProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*RemoveProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveProductResponse)
	err := c.cc.Invoke(ctx, Search_RemoveProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
// All implementations must embed UnimplementedSearchServer
// for forward compatibility.
type SearchServer interface {
	// 商品搜索
	SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error)
	GetHotKeywords(context.Context, *GetHotKeywordsRequest) (*GetHotKeywordsResponse, error)
	GetSearchSuggestions(context.Context, *GetSearchSuggestionsRequest) (*GetSearchSuggestionsResponse, error)
	SaveSearchHistory(context.Context, *SaveSearchHistoryRequest) (*SaveSearchHistoryResponse, error)
	GetSearchHistory(context.Context, *GetSearchHistoryRequest) (*GetSearchHistoryResponse, error)
	DeleteSearchHistory(context.Context, *DeleteSearchHistoryRequest) (*DeleteSearchHistoryResponse, error)
	// 索引管理
	SyncProduct(context.Context, *SyncProductRequest) (*SyncProductResponse, error)
	RemoveProduct(context.Context, *RemoveProductRequest) (*RemoveProductResponse, error)
	mustEmbedUnimplementedSearchServer()
}

// UnimplementedSearchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchServer struct{}

func (UnimplementedSearchServer) SearchProducts(context.Context, *SearchProductsRequest) (*SearchProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProducts not implemented")
}
func (UnimplementedSearchServer) GetHotKeywords(context.Context, *GetHotKeywordsRequest) (*GetHotKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotKeywords not implemented")
}
func (UnimplementedSearchServer) GetSearchSuggestions(context.Context, *GetSearchSuggestionsRequest) (*GetSearchSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchSuggestions not implemented")
}
func (UnimplementedSearchServer) SaveSearchHistory(context.Context, *SaveSearchHistoryRequest) (*SaveSearchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSearchHistory not implemented")
}
func (UnimplementedSearchServer) GetSearchHistory(context.Context, *GetSearchHistoryRequest) (*GetSearchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchHistory not implemented")
}
func (UnimplementedSearchServer) DeleteSearchHistory(context.Context, *DeleteSearchHistoryRequest) (*DeleteSearchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchHistory not implemented")
}
func (UnimplementedSearchServer) SyncProduct(context.Context, *SyncProductRequest) (*SyncProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProduct not implemented")
}
func (UnimplementedSearchServer) RemoveProduct(context.Context, *RemoveProductRequest) (*RemoveProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProduct not implemented")
}
func (UnimplementedSearchServer) mustEmbedUnimplementedSearchServer() {}
func (UnimplementedSearchServer) testEmbeddedByValue()                {}

// UnsafeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServer will
// result in compilation errors.
type UnsafeSearchServer interface {
	mustEmbedUnimplementedSearchServer()
}

func RegisterSearchServer(s grpc.ServiceRegistrar, srv SearchServer) {
	// If the following call pancis, it indicates UnimplementedSearchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Search_ServiceDesc, srv)
}

func _Search_SearchProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SearchProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_SearchProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SearchProducts(ctx, req.(*SearchProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetHotKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetHotKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_GetHotKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetHotKeywords(ctx, req.(*GetHotKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetSearchSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetSearchSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_GetSearchSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetSearchSuggestions(ctx, req.(*GetSearchSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SaveSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSearchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SaveSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_SaveSearchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SaveSearchHistory(ctx, req.(*SaveSearchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_GetSearchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetSearchHistory(ctx, req.(*GetSearchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_DeleteSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).DeleteSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_DeleteSearchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).DeleteSearchHistory(ctx, req.(*DeleteSearchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SyncProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SyncProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_SyncProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SyncProduct(ctx, req.(*SyncProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_RemoveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).RemoveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_RemoveProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).RemoveProduct(ctx, req.(*RemoveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Search_ServiceDesc is the grpc.ServiceDesc for Search service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Search_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchProducts",
			Handler:    _Search_SearchProducts_Handler,
		},
		{
			MethodName: "GetHotKeywords",
			Handler:    _Search_GetHotKeywords_Handler,
		},
		{
			MethodName: "GetSearchSuggestions",
			Handler:    _Search_GetSearchSuggestions_Handler,
		},
		{
			MethodName: "SaveSearchHistory",
			Handler:    _Search_SaveSearchHistory_Handler,
		},
		{
			MethodName: "GetSearchHistory",
			Handler:    _Search_GetSearchHistory_Handler,
		},
		{
			MethodName: "DeleteSearchHistory",
			Handler:    _Search_DeleteSearchHistory_Handler,
		},
		{
			MethodName: "SyncProduct",
			Handler:    _Search_SyncProduct_Handler,
		},
		{
			MethodName: "RemoveProduct",
			Handler:    _Search_RemoveProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}
