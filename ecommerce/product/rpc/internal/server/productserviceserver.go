// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: product.proto

package server

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/product/rpc/internal/logic"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/product/rpc/internal/svc"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/product/rpc/product"
)

type ProductServiceServer struct {
	svcCtx *svc.ServiceContext
	product.UnimplementedProductServiceServer
}

func NewProductServiceServer(svcCtx *svc.ServiceContext) *ProductServiceServer {
	return &ProductServiceServer{
		svcCtx: svcCtx,
	}
}

// 商品管理
func (s *ProductServiceServer) CreateProduct(ctx context.Context, in *product.CreateProductRequest) (*product.CreateProductResponse, error) {
	l := logic.NewCreateProductLogic(ctx, s.svcCtx)
	return l.CreateProduct(in)
}

func (s *ProductServiceServer) UpdateProduct(ctx context.Context, in *product.UpdateProductRequest) (*product.UpdateProductResponse, error) {
	l := logic.NewUpdateProductLogic(ctx, s.svcCtx)
	return l.UpdateProduct(in)
}

func (s *ProductServiceServer) GetProduct(ctx context.Context, in *product.GetProductRequest) (*product.GetProductResponse, error) {
	l := logic.NewGetProductLogic(ctx, s.svcCtx)
	return l.GetProduct(in)
}

func (s *ProductServiceServer) ListProducts(ctx context.Context, in *product.ListProductsRequest) (*product.ListProductsResponse, error) {
	l := logic.NewListProductsLogic(ctx, s.svcCtx)
	return l.ListProducts(in)
}

func (s *ProductServiceServer) DeleteProduct(ctx context.Context, in *product.DeleteProductRequest) (*product.DeleteProductResponse, error) {
	l := logic.NewDeleteProductLogic(ctx, s.svcCtx)
	return l.DeleteProduct(in)
}

// 分类管理
func (s *ProductServiceServer) CreateCategory(ctx context.Context, in *product.CreateCategoryRequest) (*product.CreateCategoryResponse, error) {
	l := logic.NewCreateCategoryLogic(ctx, s.svcCtx)
	return l.CreateCategory(in)
}

func (s *ProductServiceServer) UpdateCategory(ctx context.Context, in *product.UpdateCategoryRequest) (*product.UpdateCategoryResponse, error) {
	l := logic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

func (s *ProductServiceServer) DeleteCategory(ctx context.Context, in *product.DeleteCategoryRequest) (*product.DeleteCategoryResponse, error) {
	l := logic.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

func (s *ProductServiceServer) GetCategory(ctx context.Context, in *product.GetCategoryRequest) (*product.GetCategoryResponse, error) {
	l := logic.NewGetCategoryLogic(ctx, s.svcCtx)
	return l.GetCategory(in)
}

func (s *ProductServiceServer) ListCategories(ctx context.Context, in *product.ListCategoriesRequest) (*product.ListCategoriesResponse, error) {
	l := logic.NewListCategoriesLogic(ctx, s.svcCtx)
	return l.ListCategories(in)
}

// SKU管理
func (s *ProductServiceServer) CreateSku(ctx context.Context, in *product.CreateSkuRequest) (*product.CreateSkuResponse, error) {
	l := logic.NewCreateSkuLogic(ctx, s.svcCtx)
	return l.CreateSku(in)
}

func (s *ProductServiceServer) UpdateSku(ctx context.Context, in *product.UpdateSkuRequest) (*product.UpdateSkuResponse, error) {
	l := logic.NewUpdateSkuLogic(ctx, s.svcCtx)
	return l.UpdateSku(in)
}

func (s *ProductServiceServer) DeleteSku(ctx context.Context, in *product.DeleteSkuRequest) (*product.DeleteSkuResponse, error) {
	l := logic.NewDeleteSkuLogic(ctx, s.svcCtx)
	return l.DeleteSku(in)
}

func (s *ProductServiceServer) GetSku(ctx context.Context, in *product.GetSkuRequest) (*product.GetSkuResponse, error) {
	l := logic.NewGetSkuLogic(ctx, s.svcCtx)
	return l.GetSku(in)
}

func (s *ProductServiceServer) ListSkus(ctx context.Context, in *product.ListSkusRequest) (*product.ListSkusResponse, error) {
	l := logic.NewListSkusLogic(ctx, s.svcCtx)
	return l.ListSkus(in)
}

// 评价管理
func (s *ProductServiceServer) CreateReview(ctx context.Context, in *product.CreateReviewRequest) (*product.CreateReviewResponse, error) {
	l := logic.NewCreateReviewLogic(ctx, s.svcCtx)
	return l.CreateReview(in)
}

func (s *ProductServiceServer) UpdateReview(ctx context.Context, in *product.UpdateReviewRequest) (*product.UpdateReviewResponse, error) {
	l := logic.NewUpdateReviewLogic(ctx, s.svcCtx)
	return l.UpdateReview(in)
}

func (s *ProductServiceServer) ChangeReviewStatus(ctx context.Context, in *product.ChangeReviewStatusRequest) (*product.ChangeReviewStatusResponse, error) {
	l := logic.NewChangeReviewStatusLogic(ctx, s.svcCtx)
	return l.ChangeReviewStatus(in)
}

func (s *ProductServiceServer) DeleteReview(ctx context.Context, in *product.DeleteReviewRequest) (*product.DeleteReviewResponse, error) {
	l := logic.NewDeleteReviewLogic(ctx, s.svcCtx)
	return l.DeleteReview(in)
}

func (s *ProductServiceServer) ListReviews(ctx context.Context, in *product.ListReviewsRequest) (*product.ListReviewsResponse, error) {
	l := logic.NewListReviewsLogic(ctx, s.svcCtx)
	return l.ListReviews(in)
}
