// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/fyerfyer/gozero-ecommerce/ecommerce/order/rpc/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// OrdersModel is an autogenerated mock type for the OrdersModel type
type OrdersModel struct {
	mock.Mock
}

type OrdersModel_Expecter struct {
	mock *mock.Mock
}

func (_m *OrdersModel) EXPECT() *OrdersModel_Expecter {
	return &OrdersModel_Expecter{mock: &_m.Mock}
}

// BatchUpdateStatus provides a mock function with given fields: ctx, ids, status
func (_m *OrdersModel) BatchUpdateStatus(ctx context.Context, ids []uint64, status int64) error {
	ret := _m.Called(ctx, ids, status)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64, int64) error); ok {
		r0 = rf(ctx, ids, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrdersModel_BatchUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchUpdateStatus'
type OrdersModel_BatchUpdateStatus_Call struct {
	*mock.Call
}

// BatchUpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uint64
//   - status int64
func (_e *OrdersModel_Expecter) BatchUpdateStatus(ctx interface{}, ids interface{}, status interface{}) *OrdersModel_BatchUpdateStatus_Call {
	return &OrdersModel_BatchUpdateStatus_Call{Call: _e.mock.On("BatchUpdateStatus", ctx, ids, status)}
}

func (_c *OrdersModel_BatchUpdateStatus_Call) Run(run func(ctx context.Context, ids []uint64, status int64)) *OrdersModel_BatchUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64), args[2].(int64))
	})
	return _c
}

func (_c *OrdersModel_BatchUpdateStatus_Call) Return(_a0 error) *OrdersModel_BatchUpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrdersModel_BatchUpdateStatus_Call) RunAndReturn(run func(context.Context, []uint64, int64) error) *OrdersModel_BatchUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CountByUserIdAndStatus provides a mock function with given fields: ctx, userId, status
func (_m *OrdersModel) CountByUserIdAndStatus(ctx context.Context, userId uint64, status int64) (int64, error) {
	ret := _m.Called(ctx, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for CountByUserIdAndStatus")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64) (int64, error)); ok {
		return rf(ctx, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64) int64); ok {
		r0 = rf(ctx, userId, status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, int64) error); ok {
		r1 = rf(ctx, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_CountByUserIdAndStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByUserIdAndStatus'
type OrdersModel_CountByUserIdAndStatus_Call struct {
	*mock.Call
}

// CountByUserIdAndStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uint64
//   - status int64
func (_e *OrdersModel_Expecter) CountByUserIdAndStatus(ctx interface{}, userId interface{}, status interface{}) *OrdersModel_CountByUserIdAndStatus_Call {
	return &OrdersModel_CountByUserIdAndStatus_Call{Call: _e.mock.On("CountByUserIdAndStatus", ctx, userId, status)}
}

func (_c *OrdersModel_CountByUserIdAndStatus_Call) Run(run func(ctx context.Context, userId uint64, status int64)) *OrdersModel_CountByUserIdAndStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(int64))
	})
	return _c
}

func (_c *OrdersModel_CountByUserIdAndStatus_Call) Return(_a0 int64, _a1 error) *OrdersModel_CountByUserIdAndStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_CountByUserIdAndStatus_Call) RunAndReturn(run func(context.Context, uint64, int64) (int64, error)) *OrdersModel_CountByUserIdAndStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrdersModel) CreateOrder(ctx context.Context, order *model.Orders) (uint64, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Orders) (uint64, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Orders) uint64); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Orders) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrdersModel_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *model.Orders
func (_e *OrdersModel_Expecter) CreateOrder(ctx interface{}, order interface{}) *OrdersModel_CreateOrder_Call {
	return &OrdersModel_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *OrdersModel_CreateOrder_Call) Run(run func(ctx context.Context, order *model.Orders)) *OrdersModel_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Orders))
	})
	return _c
}

func (_c *OrdersModel_CreateOrder_Call) Return(_a0 uint64, _a1 error) *OrdersModel_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_CreateOrder_Call) RunAndReturn(run func(context.Context, *model.Orders) (uint64, error)) *OrdersModel_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *OrdersModel) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrdersModel_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type OrdersModel_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *OrdersModel_Expecter) Delete(ctx interface{}, id interface{}) *OrdersModel_Delete_Call {
	return &OrdersModel_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *OrdersModel_Delete_Call) Run(run func(ctx context.Context, id uint64)) *OrdersModel_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrdersModel_Delete_Call) Return(_a0 error) *OrdersModel_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrdersModel_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *OrdersModel_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOrderNo provides a mock function with given fields: ctx, orderNo
func (_m *OrdersModel) FindByOrderNo(ctx context.Context, orderNo string) (*model.Orders, error) {
	ret := _m.Called(ctx, orderNo)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrderNo")
	}

	var r0 *model.Orders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Orders, error)); ok {
		return rf(ctx, orderNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Orders); ok {
		r0 = rf(ctx, orderNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_FindByOrderNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrderNo'
type OrdersModel_FindByOrderNo_Call struct {
	*mock.Call
}

// FindByOrderNo is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNo string
func (_e *OrdersModel_Expecter) FindByOrderNo(ctx interface{}, orderNo interface{}) *OrdersModel_FindByOrderNo_Call {
	return &OrdersModel_FindByOrderNo_Call{Call: _e.mock.On("FindByOrderNo", ctx, orderNo)}
}

func (_c *OrdersModel_FindByOrderNo_Call) Run(run func(ctx context.Context, orderNo string)) *OrdersModel_FindByOrderNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrdersModel_FindByOrderNo_Call) Return(_a0 *model.Orders, _a1 error) *OrdersModel_FindByOrderNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_FindByOrderNo_Call) RunAndReturn(run func(context.Context, string) (*model.Orders, error)) *OrdersModel_FindByOrderNo_Call {
	_c.Call.Return(run)
	return _c
}

// FindByStatus provides a mock function with given fields: ctx, status
func (_m *OrdersModel) FindByStatus(ctx context.Context, status int64) ([]*model.Orders, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatus")
	}

	var r0 []*model.Orders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.Orders, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.Orders); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_FindByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStatus'
type OrdersModel_FindByStatus_Call struct {
	*mock.Call
}

// FindByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status int64
func (_e *OrdersModel_Expecter) FindByStatus(ctx interface{}, status interface{}) *OrdersModel_FindByStatus_Call {
	return &OrdersModel_FindByStatus_Call{Call: _e.mock.On("FindByStatus", ctx, status)}
}

func (_c *OrdersModel_FindByStatus_Call) Run(run func(ctx context.Context, status int64)) *OrdersModel_FindByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *OrdersModel_FindByStatus_Call) Return(_a0 []*model.Orders, _a1 error) *OrdersModel_FindByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_FindByStatus_Call) RunAndReturn(run func(context.Context, int64) ([]*model.Orders, error)) *OrdersModel_FindByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserIdAndStatus provides a mock function with given fields: ctx, userId, status
func (_m *OrdersModel) FindByUserIdAndStatus(ctx context.Context, userId uint64, status int64) ([]*model.Orders, error) {
	ret := _m.Called(ctx, userId, status)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIdAndStatus")
	}

	var r0 []*model.Orders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64) ([]*model.Orders, error)); ok {
		return rf(ctx, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64) []*model.Orders); ok {
		r0 = rf(ctx, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, int64) error); ok {
		r1 = rf(ctx, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_FindByUserIdAndStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserIdAndStatus'
type OrdersModel_FindByUserIdAndStatus_Call struct {
	*mock.Call
}

// FindByUserIdAndStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uint64
//   - status int64
func (_e *OrdersModel_Expecter) FindByUserIdAndStatus(ctx interface{}, userId interface{}, status interface{}) *OrdersModel_FindByUserIdAndStatus_Call {
	return &OrdersModel_FindByUserIdAndStatus_Call{Call: _e.mock.On("FindByUserIdAndStatus", ctx, userId, status)}
}

func (_c *OrdersModel_FindByUserIdAndStatus_Call) Run(run func(ctx context.Context, userId uint64, status int64)) *OrdersModel_FindByUserIdAndStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(int64))
	})
	return _c
}

func (_c *OrdersModel_FindByUserIdAndStatus_Call) Return(_a0 []*model.Orders, _a1 error) *OrdersModel_FindByUserIdAndStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_FindByUserIdAndStatus_Call) RunAndReturn(run func(context.Context, uint64, int64) ([]*model.Orders, error)) *OrdersModel_FindByUserIdAndStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserIdWithPage provides a mock function with given fields: ctx, userId, status, page, pageSize
func (_m *OrdersModel) FindByUserIdWithPage(ctx context.Context, userId uint64, status int64, page int, pageSize int) ([]*model.Orders, error) {
	ret := _m.Called(ctx, userId, status, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIdWithPage")
	}

	var r0 []*model.Orders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64, int, int) ([]*model.Orders, error)); ok {
		return rf(ctx, userId, status, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64, int, int) []*model.Orders); ok {
		r0 = rf(ctx, userId, status, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, int64, int, int) error); ok {
		r1 = rf(ctx, userId, status, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_FindByUserIdWithPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserIdWithPage'
type OrdersModel_FindByUserIdWithPage_Call struct {
	*mock.Call
}

// FindByUserIdWithPage is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uint64
//   - status int64
//   - page int
//   - pageSize int
func (_e *OrdersModel_Expecter) FindByUserIdWithPage(ctx interface{}, userId interface{}, status interface{}, page interface{}, pageSize interface{}) *OrdersModel_FindByUserIdWithPage_Call {
	return &OrdersModel_FindByUserIdWithPage_Call{Call: _e.mock.On("FindByUserIdWithPage", ctx, userId, status, page, pageSize)}
}

func (_c *OrdersModel_FindByUserIdWithPage_Call) Run(run func(ctx context.Context, userId uint64, status int64, page int, pageSize int)) *OrdersModel_FindByUserIdWithPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(int64), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *OrdersModel_FindByUserIdWithPage_Call) Return(_a0 []*model.Orders, _a1 error) *OrdersModel_FindByUserIdWithPage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_FindByUserIdWithPage_Call) RunAndReturn(run func(context.Context, uint64, int64, int, int) ([]*model.Orders, error)) *OrdersModel_FindByUserIdWithPage_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *OrdersModel) FindOne(ctx context.Context, id uint64) (*model.Orders, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *model.Orders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.Orders, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Orders); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type OrdersModel_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *OrdersModel_Expecter) FindOne(ctx interface{}, id interface{}) *OrdersModel_FindOne_Call {
	return &OrdersModel_FindOne_Call{Call: _e.mock.On("FindOne", ctx, id)}
}

func (_c *OrdersModel_FindOne_Call) Run(run func(ctx context.Context, id uint64)) *OrdersModel_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrdersModel_FindOne_Call) Return(_a0 *model.Orders, _a1 error) *OrdersModel_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_FindOne_Call) RunAndReturn(run func(context.Context, uint64) (*model.Orders, error)) *OrdersModel_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByOrderNo provides a mock function with given fields: ctx, orderNo
func (_m *OrdersModel) FindOneByOrderNo(ctx context.Context, orderNo string) (*model.Orders, error) {
	ret := _m.Called(ctx, orderNo)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByOrderNo")
	}

	var r0 *model.Orders
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Orders, error)); ok {
		return rf(ctx, orderNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Orders); ok {
		r0 = rf(ctx, orderNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Orders)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_FindOneByOrderNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByOrderNo'
type OrdersModel_FindOneByOrderNo_Call struct {
	*mock.Call
}

// FindOneByOrderNo is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNo string
func (_e *OrdersModel_Expecter) FindOneByOrderNo(ctx interface{}, orderNo interface{}) *OrdersModel_FindOneByOrderNo_Call {
	return &OrdersModel_FindOneByOrderNo_Call{Call: _e.mock.On("FindOneByOrderNo", ctx, orderNo)}
}

func (_c *OrdersModel_FindOneByOrderNo_Call) Run(run func(ctx context.Context, orderNo string)) *OrdersModel_FindOneByOrderNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrdersModel_FindOneByOrderNo_Call) Return(_a0 *model.Orders, _a1 error) *OrdersModel_FindOneByOrderNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_FindOneByOrderNo_Call) RunAndReturn(run func(context.Context, string) (*model.Orders, error)) *OrdersModel_FindOneByOrderNo_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, data
func (_m *OrdersModel) Insert(ctx context.Context, data *model.Orders) (sql.Result, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Orders) (sql.Result, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Orders) sql.Result); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Orders) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersModel_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type OrdersModel_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.Orders
func (_e *OrdersModel_Expecter) Insert(ctx interface{}, data interface{}) *OrdersModel_Insert_Call {
	return &OrdersModel_Insert_Call{Call: _e.mock.On("Insert", ctx, data)}
}

func (_c *OrdersModel_Insert_Call) Run(run func(ctx context.Context, data *model.Orders)) *OrdersModel_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Orders))
	})
	return _c
}

func (_c *OrdersModel_Insert_Call) Return(_a0 sql.Result, _a1 error) *OrdersModel_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersModel_Insert_Call) RunAndReturn(run func(context.Context, *model.Orders) (sql.Result, error)) *OrdersModel_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *OrdersModel) Update(ctx context.Context, data *model.Orders) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Orders) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrdersModel_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrdersModel_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.Orders
func (_e *OrdersModel_Expecter) Update(ctx interface{}, data interface{}) *OrdersModel_Update_Call {
	return &OrdersModel_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *OrdersModel_Update_Call) Run(run func(ctx context.Context, data *model.Orders)) *OrdersModel_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Orders))
	})
	return _c
}

func (_c *OrdersModel_Update_Call) Return(_a0 error) *OrdersModel_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrdersModel_Update_Call) RunAndReturn(run func(context.Context, *model.Orders) error) *OrdersModel_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *OrdersModel) UpdateStatus(ctx context.Context, id uint64, status int64) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int64) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrdersModel_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type OrdersModel_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
//   - status int64
func (_e *OrdersModel_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *OrdersModel_UpdateStatus_Call {
	return &OrdersModel_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *OrdersModel_UpdateStatus_Call) Run(run func(ctx context.Context, id uint64, status int64)) *OrdersModel_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(int64))
	})
	return _c
}

func (_c *OrdersModel_UpdateStatus_Call) Return(_a0 error) *OrdersModel_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrdersModel_UpdateStatus_Call) RunAndReturn(run func(context.Context, uint64, int64) error) *OrdersModel_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrdersModel creates a new instance of OrdersModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersModel {
	mock := &OrdersModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
