// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/fyerfyer/gozero-ecommerce/ecommerce/order/rpc/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// OrderRefundsModel is an autogenerated mock type for the OrderRefundsModel type
type OrderRefundsModel struct {
	mock.Mock
}

type OrderRefundsModel_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRefundsModel) EXPECT() *OrderRefundsModel_Expecter {
	return &OrderRefundsModel_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *OrderRefundsModel) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRefundsModel_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type OrderRefundsModel_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *OrderRefundsModel_Expecter) Delete(ctx interface{}, id interface{}) *OrderRefundsModel_Delete_Call {
	return &OrderRefundsModel_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *OrderRefundsModel_Delete_Call) Run(run func(ctx context.Context, id uint64)) *OrderRefundsModel_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrderRefundsModel_Delete_Call) Return(_a0 error) *OrderRefundsModel_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRefundsModel_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *OrderRefundsModel_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOrderId provides a mock function with given fields: ctx, orderId
func (_m *OrderRefundsModel) FindByOrderId(ctx context.Context, orderId uint64) ([]*model.OrderRefunds, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrderId")
	}

	var r0 []*model.OrderRefunds
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]*model.OrderRefunds, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []*model.OrderRefunds); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderRefunds)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRefundsModel_FindByOrderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrderId'
type OrderRefundsModel_FindByOrderId_Call struct {
	*mock.Call
}

// FindByOrderId is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uint64
func (_e *OrderRefundsModel_Expecter) FindByOrderId(ctx interface{}, orderId interface{}) *OrderRefundsModel_FindByOrderId_Call {
	return &OrderRefundsModel_FindByOrderId_Call{Call: _e.mock.On("FindByOrderId", ctx, orderId)}
}

func (_c *OrderRefundsModel_FindByOrderId_Call) Run(run func(ctx context.Context, orderId uint64)) *OrderRefundsModel_FindByOrderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrderRefundsModel_FindByOrderId_Call) Return(_a0 []*model.OrderRefunds, _a1 error) *OrderRefundsModel_FindByOrderId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRefundsModel_FindByOrderId_Call) RunAndReturn(run func(context.Context, uint64) ([]*model.OrderRefunds, error)) *OrderRefundsModel_FindByOrderId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByStatus provides a mock function with given fields: ctx, status
func (_m *OrderRefundsModel) FindByStatus(ctx context.Context, status int64) ([]*model.OrderRefunds, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatus")
	}

	var r0 []*model.OrderRefunds
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.OrderRefunds, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.OrderRefunds); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderRefunds)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRefundsModel_FindByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByStatus'
type OrderRefundsModel_FindByStatus_Call struct {
	*mock.Call
}

// FindByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status int64
func (_e *OrderRefundsModel_Expecter) FindByStatus(ctx interface{}, status interface{}) *OrderRefundsModel_FindByStatus_Call {
	return &OrderRefundsModel_FindByStatus_Call{Call: _e.mock.On("FindByStatus", ctx, status)}
}

func (_c *OrderRefundsModel_FindByStatus_Call) Run(run func(ctx context.Context, status int64)) *OrderRefundsModel_FindByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *OrderRefundsModel_FindByStatus_Call) Return(_a0 []*model.OrderRefunds, _a1 error) *OrderRefundsModel_FindByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRefundsModel_FindByStatus_Call) RunAndReturn(run func(context.Context, int64) ([]*model.OrderRefunds, error)) *OrderRefundsModel_FindByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *OrderRefundsModel) FindOne(ctx context.Context, id uint64) (*model.OrderRefunds, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *model.OrderRefunds
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.OrderRefunds, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.OrderRefunds); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderRefunds)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRefundsModel_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type OrderRefundsModel_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *OrderRefundsModel_Expecter) FindOne(ctx interface{}, id interface{}) *OrderRefundsModel_FindOne_Call {
	return &OrderRefundsModel_FindOne_Call{Call: _e.mock.On("FindOne", ctx, id)}
}

func (_c *OrderRefundsModel_FindOne_Call) Run(run func(ctx context.Context, id uint64)) *OrderRefundsModel_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrderRefundsModel_FindOne_Call) Return(_a0 *model.OrderRefunds, _a1 error) *OrderRefundsModel_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRefundsModel_FindOne_Call) RunAndReturn(run func(context.Context, uint64) (*model.OrderRefunds, error)) *OrderRefundsModel_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByRefundNo provides a mock function with given fields: ctx, refundNo
func (_m *OrderRefundsModel) FindOneByRefundNo(ctx context.Context, refundNo string) (*model.OrderRefunds, error) {
	ret := _m.Called(ctx, refundNo)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByRefundNo")
	}

	var r0 *model.OrderRefunds
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.OrderRefunds, error)); ok {
		return rf(ctx, refundNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.OrderRefunds); ok {
		r0 = rf(ctx, refundNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderRefunds)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refundNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRefundsModel_FindOneByRefundNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByRefundNo'
type OrderRefundsModel_FindOneByRefundNo_Call struct {
	*mock.Call
}

// FindOneByRefundNo is a helper method to define mock.On call
//   - ctx context.Context
//   - refundNo string
func (_e *OrderRefundsModel_Expecter) FindOneByRefundNo(ctx interface{}, refundNo interface{}) *OrderRefundsModel_FindOneByRefundNo_Call {
	return &OrderRefundsModel_FindOneByRefundNo_Call{Call: _e.mock.On("FindOneByRefundNo", ctx, refundNo)}
}

func (_c *OrderRefundsModel_FindOneByRefundNo_Call) Run(run func(ctx context.Context, refundNo string)) *OrderRefundsModel_FindOneByRefundNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRefundsModel_FindOneByRefundNo_Call) Return(_a0 *model.OrderRefunds, _a1 error) *OrderRefundsModel_FindOneByRefundNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRefundsModel_FindOneByRefundNo_Call) RunAndReturn(run func(context.Context, string) (*model.OrderRefunds, error)) *OrderRefundsModel_FindOneByRefundNo_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRefund provides a mock function with given fields: ctx, orderId
func (_m *OrderRefundsModel) GetLatestRefund(ctx context.Context, orderId uint64) (*model.OrderRefunds, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRefund")
	}

	var r0 *model.OrderRefunds
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.OrderRefunds, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.OrderRefunds); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderRefunds)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRefundsModel_GetLatestRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRefund'
type OrderRefundsModel_GetLatestRefund_Call struct {
	*mock.Call
}

// GetLatestRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uint64
func (_e *OrderRefundsModel_Expecter) GetLatestRefund(ctx interface{}, orderId interface{}) *OrderRefundsModel_GetLatestRefund_Call {
	return &OrderRefundsModel_GetLatestRefund_Call{Call: _e.mock.On("GetLatestRefund", ctx, orderId)}
}

func (_c *OrderRefundsModel_GetLatestRefund_Call) Run(run func(ctx context.Context, orderId uint64)) *OrderRefundsModel_GetLatestRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OrderRefundsModel_GetLatestRefund_Call) Return(_a0 *model.OrderRefunds, _a1 error) *OrderRefundsModel_GetLatestRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRefundsModel_GetLatestRefund_Call) RunAndReturn(run func(context.Context, uint64) (*model.OrderRefunds, error)) *OrderRefundsModel_GetLatestRefund_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, data
func (_m *OrderRefundsModel) Insert(ctx context.Context, data *model.OrderRefunds) (sql.Result, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderRefunds) (sql.Result, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderRefunds) sql.Result); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrderRefunds) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRefundsModel_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type OrderRefundsModel_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.OrderRefunds
func (_e *OrderRefundsModel_Expecter) Insert(ctx interface{}, data interface{}) *OrderRefundsModel_Insert_Call {
	return &OrderRefundsModel_Insert_Call{Call: _e.mock.On("Insert", ctx, data)}
}

func (_c *OrderRefundsModel_Insert_Call) Run(run func(ctx context.Context, data *model.OrderRefunds)) *OrderRefundsModel_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.OrderRefunds))
	})
	return _c
}

func (_c *OrderRefundsModel_Insert_Call) Return(_a0 sql.Result, _a1 error) *OrderRefundsModel_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRefundsModel_Insert_Call) RunAndReturn(run func(context.Context, *model.OrderRefunds) (sql.Result, error)) *OrderRefundsModel_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *OrderRefundsModel) Update(ctx context.Context, data *model.OrderRefunds) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderRefunds) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRefundsModel_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrderRefundsModel_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data *model.OrderRefunds
func (_e *OrderRefundsModel_Expecter) Update(ctx interface{}, data interface{}) *OrderRefundsModel_Update_Call {
	return &OrderRefundsModel_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *OrderRefundsModel_Update_Call) Run(run func(ctx context.Context, data *model.OrderRefunds)) *OrderRefundsModel_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.OrderRefunds))
	})
	return _c
}

func (_c *OrderRefundsModel_Update_Call) Return(_a0 error) *OrderRefundsModel_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRefundsModel_Update_Call) RunAndReturn(run func(context.Context, *model.OrderRefunds) error) *OrderRefundsModel_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, refundNo, status, reply
func (_m *OrderRefundsModel) UpdateStatus(ctx context.Context, refundNo string, status int64, reply string) error {
	ret := _m.Called(ctx, refundNo, status, reply)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) error); ok {
		r0 = rf(ctx, refundNo, status, reply)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRefundsModel_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type OrderRefundsModel_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - refundNo string
//   - status int64
//   - reply string
func (_e *OrderRefundsModel_Expecter) UpdateStatus(ctx interface{}, refundNo interface{}, status interface{}, reply interface{}) *OrderRefundsModel_UpdateStatus_Call {
	return &OrderRefundsModel_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, refundNo, status, reply)}
}

func (_c *OrderRefundsModel_UpdateStatus_Call) Run(run func(ctx context.Context, refundNo string, status int64, reply string)) *OrderRefundsModel_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *OrderRefundsModel_UpdateStatus_Call) Return(_a0 error) *OrderRefundsModel_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRefundsModel_UpdateStatus_Call) RunAndReturn(run func(context.Context, string, int64, string) error) *OrderRefundsModel_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRefundsModel creates a new instance of OrderRefundsModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRefundsModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRefundsModel {
	mock := &OrderRefundsModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
