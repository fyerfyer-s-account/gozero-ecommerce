// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: order.proto

package server

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/order/rpc/internal/logic"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/order/rpc/internal/svc"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/order/rpc/order"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

// 订单管理
func (s *OrderServiceServer) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.CreateOrderResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *OrderServiceServer) GetOrder(ctx context.Context, in *order.GetOrderRequest) (*order.GetOrderResponse, error) {
	l := logic.NewGetOrderLogic(ctx, s.svcCtx)
	return l.GetOrder(in)
}

func (s *OrderServiceServer) ListOrders(ctx context.Context, in *order.ListOrdersRequest) (*order.ListOrdersResponse, error) {
	l := logic.NewListOrdersLogic(ctx, s.svcCtx)
	return l.ListOrders(in)
}

func (s *OrderServiceServer) CancelOrder(ctx context.Context, in *order.CancelOrderRequest) (*order.CancelOrderResponse, error) {
	l := logic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

// 订单支付
func (s *OrderServiceServer) PayOrder(ctx context.Context, in *order.PayOrderRequest) (*order.PayOrderResponse, error) {
	l := logic.NewPayOrderLogic(ctx, s.svcCtx)
	return l.PayOrder(in)
}

func (s *OrderServiceServer) GetPaymentStatus(ctx context.Context, in *order.GetPaymentStatusRequest) (*order.GetPaymentStatusResponse, error) {
	l := logic.NewGetPaymentStatusLogic(ctx, s.svcCtx)
	return l.GetPaymentStatus(in)
}

// 订单履约
func (s *OrderServiceServer) ConfirmOrder(ctx context.Context, in *order.ConfirmOrderRequest) (*order.ConfirmOrderResponse, error) {
	l := logic.NewConfirmOrderLogic(ctx, s.svcCtx)
	return l.ConfirmOrder(in)
}

func (s *OrderServiceServer) ShipOrder(ctx context.Context, in *order.ShipOrderRequest) (*order.ShipOrderResponse, error) {
	l := logic.NewShipOrderLogic(ctx, s.svcCtx)
	return l.ShipOrder(in)
}

func (s *OrderServiceServer) ReceiveOrder(ctx context.Context, in *order.ReceiveOrderRequest) (*order.ReceiveOrderResponse, error) {
	l := logic.NewReceiveOrderLogic(ctx, s.svcCtx)
	return l.ReceiveOrder(in)
}

// 售后服务
func (s *OrderServiceServer) CreateRefund(ctx context.Context, in *order.CreateRefundRequest) (*order.CreateRefundResponse, error) {
	l := logic.NewCreateRefundLogic(ctx, s.svcCtx)
	return l.CreateRefund(in)
}

func (s *OrderServiceServer) GetRefund(ctx context.Context, in *order.GetRefundRequest) (*order.GetRefundResponse, error) {
	l := logic.NewGetRefundLogic(ctx, s.svcCtx)
	return l.GetRefund(in)
}

func (s *OrderServiceServer) ProcessRefund(ctx context.Context, in *order.ProcessRefundRequest) (*order.ProcessRefundResponse, error) {
	l := logic.NewProcessRefundLogic(ctx, s.svcCtx)
	return l.ProcessRefund(in)
}
