// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	searchStatisticsFieldNames          = builder.RawFieldNames(&SearchStatistics{})
	searchStatisticsRows                = strings.Join(searchStatisticsFieldNames, ",")
	searchStatisticsRowsExpectAutoSet   = strings.Join(stringx.Remove(searchStatisticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	searchStatisticsRowsWithPlaceHolder = strings.Join(stringx.Remove(searchStatisticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	searchStatisticsModel interface {
		Insert(ctx context.Context, data *SearchStatistics) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SearchStatistics, error)
		FindOneByKeywordDate(ctx context.Context, keyword string, date time.Time) (*SearchStatistics, error)
		Update(ctx context.Context, data *SearchStatistics) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSearchStatisticsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SearchStatistics struct {
		Id          uint64    `db:"id"`           // è‡ªå¢žID
		Keyword     string    `db:"keyword"`      // æœç´¢å…³é”®è¯
		Count       int64     `db:"count"`        // æœç´¢æ¬¡æ•°
		ResultCount int64     `db:"result_count"` // ç»“æžœæ•°é‡
		Date        time.Time `db:"date"`         // ç»Ÿè®¡æ—¥æœŸ
		CreatedAt   time.Time `db:"created_at"`   // åˆ›å»ºæ—¶é—´
		UpdatedAt   time.Time `db:"updated_at"`   // æ›´æ–°æ—¶é—´
	}
)

func newSearchStatisticsModel(conn sqlx.SqlConn) *defaultSearchStatisticsModel {
	return &defaultSearchStatisticsModel{
		conn:  conn,
		table: "`search_statistics`",
	}
}

func (m *defaultSearchStatisticsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSearchStatisticsModel) FindOne(ctx context.Context, id uint64) (*SearchStatistics, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchStatisticsRows, m.table)
	var resp SearchStatistics
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSearchStatisticsModel) FindOneByKeywordDate(ctx context.Context, keyword string, date time.Time) (*SearchStatistics, error) {
	var resp SearchStatistics
	query := fmt.Sprintf("select %s from %s where `keyword` = ? and `date` = ? limit 1", searchStatisticsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, keyword, date)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSearchStatisticsModel) Insert(ctx context.Context, data *SearchStatistics) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, searchStatisticsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Keyword, data.Count, data.ResultCount, data.Date)
	return ret, err
}

func (m *defaultSearchStatisticsModel) Update(ctx context.Context, newData *SearchStatistics) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, searchStatisticsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Keyword, newData.Count, newData.ResultCount, newData.Date, newData.Id)
	return err
}

func (m *defaultSearchStatisticsModel) tableName() string {
	return m.table
}
