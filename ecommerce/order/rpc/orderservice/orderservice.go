// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.4
// Source: order.proto

package orderservice

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/order/rpc/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelOrderRequest       = order.CancelOrderRequest
	CancelOrderResponse      = order.CancelOrderResponse
	ConfirmOrderRequest      = order.ConfirmOrderRequest
	ConfirmOrderResponse     = order.ConfirmOrderResponse
	CreateOrderRequest       = order.CreateOrderRequest
	CreateOrderResponse      = order.CreateOrderResponse
	CreateRefundRequest      = order.CreateRefundRequest
	CreateRefundResponse     = order.CreateRefundResponse
	GetOrderRequest          = order.GetOrderRequest
	GetOrderResponse         = order.GetOrderResponse
	GetPaymentStatusRequest  = order.GetPaymentStatusRequest
	GetPaymentStatusResponse = order.GetPaymentStatusResponse
	GetRefundRequest         = order.GetRefundRequest
	GetRefundResponse        = order.GetRefundResponse
	ListOrdersRequest        = order.ListOrdersRequest
	ListOrdersResponse       = order.ListOrdersResponse
	Order                    = order.Order
	OrderItem                = order.OrderItem
	OrderItemRequest         = order.OrderItemRequest
	PayOrderRequest          = order.PayOrderRequest
	PayOrderResponse         = order.PayOrderResponse
	PaymentInfo              = order.PaymentInfo
	ProcessRefundRequest     = order.ProcessRefundRequest
	ProcessRefundResponse    = order.ProcessRefundResponse
	ReceiveOrderRequest      = order.ReceiveOrderRequest
	ReceiveOrderResponse     = order.ReceiveOrderResponse
	RefundInfo               = order.RefundInfo
	ShipOrderRequest         = order.ShipOrderRequest
	ShipOrderResponse        = order.ShipOrderResponse
	ShippingInfo             = order.ShippingInfo

	OrderService interface {
		// 订单管理
		CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
		ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
		CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
		// 订单支付
		PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error)
		GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error)
		// 订单履约
		ConfirmOrder(ctx context.Context, in *ConfirmOrderRequest, opts ...grpc.CallOption) (*ConfirmOrderResponse, error)
		ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...grpc.CallOption) (*ShipOrderResponse, error)
		ReceiveOrder(ctx context.Context, in *ReceiveOrderRequest, opts ...grpc.CallOption) (*ReceiveOrderResponse, error)
		// 售后服务
		CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error)
		GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error)
		ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error)
	}

	defaultOrderService struct {
		cli zrpc.Client
	}
)

func NewOrderService(cli zrpc.Client) OrderService {
	return &defaultOrderService{
		cli: cli,
	}
}

// 订单管理
func (m *defaultOrderService) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrderService) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrderService) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ListOrders(ctx, in, opts...)
}

func (m *defaultOrderService) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CancelOrder(ctx, in, opts...)
}

// 订单支付
func (m *defaultOrderService) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.PayOrder(ctx, in, opts...)
}

func (m *defaultOrderService) GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetPaymentStatus(ctx, in, opts...)
}

// 订单履约
func (m *defaultOrderService) ConfirmOrder(ctx context.Context, in *ConfirmOrderRequest, opts ...grpc.CallOption) (*ConfirmOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ConfirmOrder(ctx, in, opts...)
}

func (m *defaultOrderService) ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...grpc.CallOption) (*ShipOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ShipOrder(ctx, in, opts...)
}

func (m *defaultOrderService) ReceiveOrder(ctx context.Context, in *ReceiveOrderRequest, opts ...grpc.CallOption) (*ReceiveOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ReceiveOrder(ctx, in, opts...)
}

// 售后服务
func (m *defaultOrderService) CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateRefund(ctx, in, opts...)
}

func (m *defaultOrderService) GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetRefund(ctx, in, opts...)
}

func (m *defaultOrderService) ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ProcessRefund(ctx, in, opts...)
}
