// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: payment.proto

package paymentclient

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/payment/rpc/payment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatePaymentChannelRequest  = payment.CreatePaymentChannelRequest
	CreatePaymentChannelResponse = payment.CreatePaymentChannelResponse
	CreatePaymentRequest         = payment.CreatePaymentRequest
	CreatePaymentResponse        = payment.CreatePaymentResponse
	CreateRefundRequest          = payment.CreateRefundRequest
	CreateRefundResponse         = payment.CreateRefundResponse
	GetPaymentRequest            = payment.GetPaymentRequest
	GetPaymentResponse           = payment.GetPaymentResponse
	GetPaymentStatusRequest      = payment.GetPaymentStatusRequest
	GetPaymentStatusResponse     = payment.GetPaymentStatusResponse
	GetRefundRequest             = payment.GetRefundRequest
	GetRefundResponse            = payment.GetRefundResponse
	ListPaymentChannelsRequest   = payment.ListPaymentChannelsRequest
	ListPaymentChannelsResponse  = payment.ListPaymentChannelsResponse
	PaymentChannel               = payment.PaymentChannel
	PaymentNotifyRequest         = payment.PaymentNotifyRequest
	PaymentNotifyResponse        = payment.PaymentNotifyResponse
	PaymentOrder                 = payment.PaymentOrder
	RefundNotifyRequest          = payment.RefundNotifyRequest
	RefundNotifyResponse         = payment.RefundNotifyResponse
	RefundOrder                  = payment.RefundOrder
	UpdatePaymentChannelRequest  = payment.UpdatePaymentChannelRequest
	UpdatePaymentChannelResponse = payment.UpdatePaymentChannelResponse

	Payment interface {
		// 支付相关
		CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
		GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
		PaymentNotify(ctx context.Context, in *PaymentNotifyRequest, opts ...grpc.CallOption) (*PaymentNotifyResponse, error)
		GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error)
		// 退款相关
		CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error)
		GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error)
		RefundNotify(ctx context.Context, in *RefundNotifyRequest, opts ...grpc.CallOption) (*RefundNotifyResponse, error)
		// 支付渠道
		CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...grpc.CallOption) (*CreatePaymentChannelResponse, error)
		UpdatePaymentChannel(ctx context.Context, in *UpdatePaymentChannelRequest, opts ...grpc.CallOption) (*UpdatePaymentChannelResponse, error)
		ListPaymentChannels(ctx context.Context, in *ListPaymentChannelsRequest, opts ...grpc.CallOption) (*ListPaymentChannelsResponse, error)
	}

	defaultPayment struct {
		cli zrpc.Client
	}
)

func NewPayment(cli zrpc.Client) Payment {
	return &defaultPayment{
		cli: cli,
	}
}

// 支付相关
func (m *defaultPayment) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.CreatePayment(ctx, in, opts...)
}

func (m *defaultPayment) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.GetPayment(ctx, in, opts...)
}

func (m *defaultPayment) PaymentNotify(ctx context.Context, in *PaymentNotifyRequest, opts ...grpc.CallOption) (*PaymentNotifyResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.PaymentNotify(ctx, in, opts...)
}

func (m *defaultPayment) GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.GetPaymentStatus(ctx, in, opts...)
}

// 退款相关
func (m *defaultPayment) CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.CreateRefund(ctx, in, opts...)
}

func (m *defaultPayment) GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.GetRefund(ctx, in, opts...)
}

func (m *defaultPayment) RefundNotify(ctx context.Context, in *RefundNotifyRequest, opts ...grpc.CallOption) (*RefundNotifyResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.RefundNotify(ctx, in, opts...)
}

// 支付渠道
func (m *defaultPayment) CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...grpc.CallOption) (*CreatePaymentChannelResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.CreatePaymentChannel(ctx, in, opts...)
}

func (m *defaultPayment) UpdatePaymentChannel(ctx context.Context, in *UpdatePaymentChannelRequest, opts ...grpc.CallOption) (*UpdatePaymentChannelResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.UpdatePaymentChannel(ctx, in, opts...)
}

func (m *defaultPayment) ListPaymentChannels(ctx context.Context, in *ListPaymentChannelsRequest, opts ...grpc.CallOption) (*ListPaymentChannelsResponse, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.ListPaymentChannels(ctx, in, opts...)
}
