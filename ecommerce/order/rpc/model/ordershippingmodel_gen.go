// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderShippingFieldNames          = builder.RawFieldNames(&OrderShipping{})
	orderShippingRows                = strings.Join(orderShippingFieldNames, ",")
	orderShippingRowsExpectAutoSet   = strings.Join(stringx.Remove(orderShippingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderShippingRowsWithPlaceHolder = strings.Join(stringx.Remove(orderShippingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallOrderOrderShippingIdPrefix         = "cache:mallOrder:orderShipping:id:"
	cacheMallOrderOrderShippingShippingNoPrefix = "cache:mallOrder:orderShipping:shippingNo:"
)

type (
	orderShippingModel interface {
		Insert(ctx context.Context, data *OrderShipping) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OrderShipping, error)
		FindOneByShippingNo(ctx context.Context, shippingNo sql.NullString) (*OrderShipping, error)
		Update(ctx context.Context, data *OrderShipping) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrderShippingModel struct {
		sqlc.CachedConn
		table string
	}

	OrderShipping struct {
		Id          uint64         `db:"id"`           // ç‰©æµID
		OrderId     uint64         `db:"order_id"`     // è®¢å•ID
		ShippingNo  sql.NullString `db:"shipping_no"`  // ç‰©æµå•å·
		Company     sql.NullString `db:"company"`      // ç‰©æµå…¬å¸
		Status      int64          `db:"status"`       // ç‰©æµçŠ¶æ€ 0:å¾…å‘è´§ 1:å·²å‘è´§ 2:å·²ç­¾æ”¶
		ShipTime    sql.NullTime   `db:"ship_time"`    // å‘è´§æ—¶é—´
		ReceiveTime sql.NullTime   `db:"receive_time"` // ç­¾æ”¶æ—¶é—´
		CreatedAt   time.Time      `db:"created_at"`   // åˆ›å»ºæ—¶é—´
		UpdatedAt   time.Time      `db:"updated_at"`   // æ›´æ–°æ—¶é—´
	}
)

func newOrderShippingModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderShippingModel {
	return &defaultOrderShippingModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_shipping`",
	}
}

func (m *defaultOrderShippingModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	mallOrderOrderShippingIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingIdPrefix, id)
	mallOrderOrderShippingShippingNoKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingShippingNoPrefix, data.ShippingNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallOrderOrderShippingIdKey, mallOrderOrderShippingShippingNoKey)
	return err
}

func (m *defaultOrderShippingModel) FindOne(ctx context.Context, id uint64) (*OrderShipping, error) {
	mallOrderOrderShippingIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingIdPrefix, id)
	var resp OrderShipping
	err := m.QueryRowCtx(ctx, &resp, mallOrderOrderShippingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderShippingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderShippingModel) FindOneByShippingNo(ctx context.Context, shippingNo sql.NullString) (*OrderShipping, error) {
	mallOrderOrderShippingShippingNoKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingShippingNoPrefix, shippingNo)
	var resp OrderShipping
	err := m.QueryRowIndexCtx(ctx, &resp, mallOrderOrderShippingShippingNoKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `shipping_no` = ? limit 1", orderShippingRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, shippingNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderShippingModel) Insert(ctx context.Context, data *OrderShipping) (sql.Result, error) {
	mallOrderOrderShippingIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingIdPrefix, data.Id)
	mallOrderOrderShippingShippingNoKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingShippingNoPrefix, data.ShippingNo)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, orderShippingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.ShippingNo, data.Company, data.Status, data.ShipTime, data.ReceiveTime)
	}, mallOrderOrderShippingIdKey, mallOrderOrderShippingShippingNoKey)
	return ret, err
}

func (m *defaultOrderShippingModel) Update(ctx context.Context, newData *OrderShipping) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	mallOrderOrderShippingIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingIdPrefix, data.Id)
	mallOrderOrderShippingShippingNoKey := fmt.Sprintf("%s%v", cacheMallOrderOrderShippingShippingNoPrefix, data.ShippingNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderShippingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderId, newData.ShippingNo, newData.Company, newData.Status, newData.ShipTime, newData.ReceiveTime, newData.Id)
	}, mallOrderOrderShippingIdKey, mallOrderOrderShippingShippingNoKey)
	return err
}

func (m *defaultOrderShippingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallOrderOrderShippingIdPrefix, primary)
}

func (m *defaultOrderShippingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderShippingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderShippingModel) tableName() string {
	return m.table
}
