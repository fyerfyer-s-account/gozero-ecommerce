// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderItemsFieldNames          = builder.RawFieldNames(&OrderItems{})
	orderItemsRows                = strings.Join(orderItemsFieldNames, ",")
	orderItemsRowsExpectAutoSet   = strings.Join(stringx.Remove(orderItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderItemsRowsWithPlaceHolder = strings.Join(stringx.Remove(orderItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallOrderOrderItemsIdPrefix = "cache:mallOrder:orderItems:id:"
)

type (
	orderItemsModel interface {
		Insert(ctx context.Context, data *OrderItems) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OrderItems, error)
		Update(ctx context.Context, data *OrderItems) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrderItemsModel struct {
		sqlc.CachedConn
		table string
	}

	OrderItems struct {
		Id          uint64    `db:"id"`           // è®¢å•é¡¹ID
		OrderId     uint64    `db:"order_id"`     // è®¢å•ID
		ProductId   uint64    `db:"product_id"`   // å•†å“ID
		SkuId       uint64    `db:"sku_id"`       // SKU ID
		ProductName string    `db:"product_name"` // å•†å“åç§°
		SkuName     string    `db:"sku_name"`     // SKUåç§°
		Price       float64   `db:"price"`        // å•†å“å•ä»·
		Quantity    int64     `db:"quantity"`     // è´­ä¹°æ•°é‡
		TotalAmount float64   `db:"total_amount"` // æ€»é‡‘é¢
		CreatedAt   time.Time `db:"created_at"`   // åˆ›å»ºæ—¶é—´
	}
)

func newOrderItemsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderItemsModel {
	return &defaultOrderItemsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_items`",
	}
}

func (m *defaultOrderItemsModel) Delete(ctx context.Context, id uint64) error {
	mallOrderOrderItemsIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderItemsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallOrderOrderItemsIdKey)
	return err
}

func (m *defaultOrderItemsModel) FindOne(ctx context.Context, id uint64) (*OrderItems, error) {
	mallOrderOrderItemsIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderItemsIdPrefix, id)
	var resp OrderItems
	err := m.QueryRowCtx(ctx, &resp, mallOrderOrderItemsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderItemsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderItemsModel) Insert(ctx context.Context, data *OrderItems) (sql.Result, error) {
	mallOrderOrderItemsIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderItemsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderItemsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.ProductId, data.SkuId, data.ProductName, data.SkuName, data.Price, data.Quantity, data.TotalAmount)
	}, mallOrderOrderItemsIdKey)
	return ret, err
}

func (m *defaultOrderItemsModel) Update(ctx context.Context, data *OrderItems) error {
	mallOrderOrderItemsIdKey := fmt.Sprintf("%s%v", cacheMallOrderOrderItemsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderItemsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.ProductId, data.SkuId, data.ProductName, data.SkuName, data.Price, data.Quantity, data.TotalAmount, data.Id)
	}, mallOrderOrderItemsIdKey)
	return err
}

func (m *defaultOrderItemsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallOrderOrderItemsIdPrefix, primary)
}

func (m *defaultOrderItemsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderItemsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderItemsModel) tableName() string {
	return m.table
}
