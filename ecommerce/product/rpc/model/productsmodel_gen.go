// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productsFieldNames          = builder.RawFieldNames(&Products{})
	productsRows                = strings.Join(productsFieldNames, ",")
	productsRowsExpectAutoSet   = strings.Join(stringx.Remove(productsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productsRowsWithPlaceHolder = strings.Join(stringx.Remove(productsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallProductProductsIdPrefix = "cache:mallProduct:products:id:"
)

type (
	productsModel interface {
		Insert(ctx context.Context, data *Products) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Products, error)
		Update(ctx context.Context, data *Products) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultProductsModel struct {
		sqlc.CachedConn
		table string
	}

	Products struct {
		Id          uint64         `db:"id"`          // å•†å“ID
		Name        string         `db:"name"`        // å•†å“åç§°
		Brief       sql.NullString `db:"brief"`       // å•†å“ç®€ä»‹
		Description sql.NullString `db:"description"` // å•†å“æè¿°
		CategoryId  uint64         `db:"category_id"` // åˆ†ç±»ID
		Brand       sql.NullString `db:"brand"`       // å“ç‰Œ
		Images      sql.NullString `db:"images"`      // å•†å“å›¾ç‰‡åˆ—è¡¨
		Price       float64        `db:"price"`       // å•†å“ä»·æ ¼
		Sales       int64          `db:"sales"`       // é”€é‡
		Status      int64          `db:"status"`      // çŠ¶æ€ 1:ä¸Šæž¶ 2:ä¸‹æž¶
		CreatedAt   time.Time      `db:"created_at"`  // åˆ›å»ºæ—¶é—´
		UpdatedAt   time.Time      `db:"updated_at"`  // æ›´æ–°æ—¶é—´
	}
)

func newProductsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductsModel {
	return &defaultProductsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`products`",
	}
}

func (m *defaultProductsModel) Delete(ctx context.Context, id uint64) error {
	mallProductProductsIdKey := fmt.Sprintf("%s%v", cacheMallProductProductsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallProductProductsIdKey)
	return err
}

func (m *defaultProductsModel) FindOne(ctx context.Context, id uint64) (*Products, error) {
	mallProductProductsIdKey := fmt.Sprintf("%s%v", cacheMallProductProductsIdPrefix, id)
	var resp Products
	err := m.QueryRowCtx(ctx, &resp, mallProductProductsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductsModel) Insert(ctx context.Context, data *Products) (sql.Result, error) {
	mallProductProductsIdKey := fmt.Sprintf("%s%v", cacheMallProductProductsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Brief, data.Description, data.CategoryId, data.Brand, data.Images, data.Price, data.Sales, data.Status)
	}, mallProductProductsIdKey)
	return ret, err
}

func (m *defaultProductsModel) Update(ctx context.Context, data *Products) error {
	mallProductProductsIdKey := fmt.Sprintf("%s%v", cacheMallProductProductsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Brief, data.Description, data.CategoryId, data.Brand, data.Images, data.Price, data.Sales, data.Status, data.Id)
	}, mallProductProductsIdKey)
	return err
}

func (m *defaultProductsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallProductProductsIdPrefix, primary)
}

func (m *defaultProductsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductsModel) tableName() string {
	return m.table
}
