// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: message.proto

package server

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/message/rpc/internal/logic"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/message/rpc/internal/svc"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/message/rpc/message"
)

type MessageServiceServer struct {
	svcCtx *svc.ServiceContext
	message.UnimplementedMessageServiceServer
}

func NewMessageServiceServer(svcCtx *svc.ServiceContext) *MessageServiceServer {
	return &MessageServiceServer{
		svcCtx: svcCtx,
	}
}

// 消息发送
func (s *MessageServiceServer) SendMessage(ctx context.Context, in *message.SendMessageRequest) (*message.SendMessageResponse, error) {
	l := logic.NewSendMessageLogic(ctx, s.svcCtx)
	return l.SendMessage(in)
}

func (s *MessageServiceServer) BatchSendMessage(ctx context.Context, in *message.BatchSendMessageRequest) (*message.BatchSendMessageResponse, error) {
	l := logic.NewBatchSendMessageLogic(ctx, s.svcCtx)
	return l.BatchSendMessage(in)
}

func (s *MessageServiceServer) SendTemplateMessage(ctx context.Context, in *message.SendTemplateMessageRequest) (*message.SendTemplateMessageResponse, error) {
	l := logic.NewSendTemplateMessageLogic(ctx, s.svcCtx)
	return l.SendTemplateMessage(in)
}

// 消息管理
func (s *MessageServiceServer) GetMessage(ctx context.Context, in *message.GetMessageRequest) (*message.GetMessageResponse, error) {
	l := logic.NewGetMessageLogic(ctx, s.svcCtx)
	return l.GetMessage(in)
}

func (s *MessageServiceServer) ListMessages(ctx context.Context, in *message.ListMessagesRequest) (*message.ListMessagesResponse, error) {
	l := logic.NewListMessagesLogic(ctx, s.svcCtx)
	return l.ListMessages(in)
}

func (s *MessageServiceServer) ReadMessage(ctx context.Context, in *message.ReadMessageRequest) (*message.ReadMessageResponse, error) {
	l := logic.NewReadMessageLogic(ctx, s.svcCtx)
	return l.ReadMessage(in)
}

func (s *MessageServiceServer) DeleteMessage(ctx context.Context, in *message.DeleteMessageRequest) (*message.DeleteMessageResponse, error) {
	l := logic.NewDeleteMessageLogic(ctx, s.svcCtx)
	return l.DeleteMessage(in)
}

// 消息模板
func (s *MessageServiceServer) CreateTemplate(ctx context.Context, in *message.CreateTemplateRequest) (*message.CreateTemplateResponse, error) {
	l := logic.NewCreateTemplateLogic(ctx, s.svcCtx)
	return l.CreateTemplate(in)
}

func (s *MessageServiceServer) UpdateTemplate(ctx context.Context, in *message.UpdateTemplateRequest) (*message.UpdateTemplateResponse, error) {
	l := logic.NewUpdateTemplateLogic(ctx, s.svcCtx)
	return l.UpdateTemplate(in)
}

func (s *MessageServiceServer) GetTemplate(ctx context.Context, in *message.GetTemplateRequest) (*message.GetTemplateResponse, error) {
	l := logic.NewGetTemplateLogic(ctx, s.svcCtx)
	return l.GetTemplate(in)
}

func (s *MessageServiceServer) ListTemplates(ctx context.Context, in *message.ListTemplatesRequest) (*message.ListTemplatesResponse, error) {
	l := logic.NewListTemplatesLogic(ctx, s.svcCtx)
	return l.ListTemplates(in)
}
