// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: search.proto

package searchclient

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/search/rpc/search"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteSearchHistoryRequest   = search.DeleteSearchHistoryRequest
	DeleteSearchHistoryResponse  = search.DeleteSearchHistoryResponse
	FacetResult                  = search.FacetResult
	FacetValue                   = search.FacetValue
	FilterOption                 = search.FilterOption
	GetHotKeywordsRequest        = search.GetHotKeywordsRequest
	GetHotKeywordsResponse       = search.GetHotKeywordsResponse
	GetSearchHistoryRequest      = search.GetSearchHistoryRequest
	GetSearchHistoryResponse     = search.GetSearchHistoryResponse
	GetSearchSuggestionsRequest  = search.GetSearchSuggestionsRequest
	GetSearchSuggestionsResponse = search.GetSearchSuggestionsResponse
	HotKeyword                   = search.HotKeyword
	ProductInfo                  = search.ProductInfo
	RemoveProductRequest         = search.RemoveProductRequest
	RemoveProductResponse        = search.RemoveProductResponse
	SaveSearchHistoryRequest     = search.SaveSearchHistoryRequest
	SaveSearchHistoryResponse    = search.SaveSearchHistoryResponse
	SearchHistory                = search.SearchHistory
	SearchProductsRequest        = search.SearchProductsRequest
	SearchProductsResponse       = search.SearchProductsResponse
	SortOption                   = search.SortOption
	SyncProductRequest           = search.SyncProductRequest
	SyncProductResponse          = search.SyncProductResponse

	Search interface {
		// 商品搜索
		SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error)
		GetHotKeywords(ctx context.Context, in *GetHotKeywordsRequest, opts ...grpc.CallOption) (*GetHotKeywordsResponse, error)
		GetSearchSuggestions(ctx context.Context, in *GetSearchSuggestionsRequest, opts ...grpc.CallOption) (*GetSearchSuggestionsResponse, error)
		SaveSearchHistory(ctx context.Context, in *SaveSearchHistoryRequest, opts ...grpc.CallOption) (*SaveSearchHistoryResponse, error)
		GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error)
		DeleteSearchHistory(ctx context.Context, in *DeleteSearchHistoryRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryResponse, error)
		// 索引管理
		SyncProduct(ctx context.Context, in *SyncProductRequest, opts ...grpc.CallOption) (*SyncProductResponse, error)
		RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*RemoveProductResponse, error)
	}

	defaultSearch struct {
		cli zrpc.Client
	}
)

func NewSearch(cli zrpc.Client) Search {
	return &defaultSearch{
		cli: cli,
	}
}

// 商品搜索
func (m *defaultSearch) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (*SearchProductsResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.SearchProducts(ctx, in, opts...)
}

func (m *defaultSearch) GetHotKeywords(ctx context.Context, in *GetHotKeywordsRequest, opts ...grpc.CallOption) (*GetHotKeywordsResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.GetHotKeywords(ctx, in, opts...)
}

func (m *defaultSearch) GetSearchSuggestions(ctx context.Context, in *GetSearchSuggestionsRequest, opts ...grpc.CallOption) (*GetSearchSuggestionsResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.GetSearchSuggestions(ctx, in, opts...)
}

func (m *defaultSearch) SaveSearchHistory(ctx context.Context, in *SaveSearchHistoryRequest, opts ...grpc.CallOption) (*SaveSearchHistoryResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.SaveSearchHistory(ctx, in, opts...)
}

func (m *defaultSearch) GetSearchHistory(ctx context.Context, in *GetSearchHistoryRequest, opts ...grpc.CallOption) (*GetSearchHistoryResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.GetSearchHistory(ctx, in, opts...)
}

func (m *defaultSearch) DeleteSearchHistory(ctx context.Context, in *DeleteSearchHistoryRequest, opts ...grpc.CallOption) (*DeleteSearchHistoryResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.DeleteSearchHistory(ctx, in, opts...)
}

// 索引管理
func (m *defaultSearch) SyncProduct(ctx context.Context, in *SyncProductRequest, opts ...grpc.CallOption) (*SyncProductResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.SyncProduct(ctx, in, opts...)
}

func (m *defaultSearch) RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*RemoveProductResponse, error) {
	client := search.NewSearchClient(m.cli.Conn())
	return client.RemoveProduct(ctx, in, opts...)
}
