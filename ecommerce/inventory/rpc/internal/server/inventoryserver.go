// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: inventory.proto

package server

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/inventory/rpc/internal/logic"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/inventory/rpc/internal/svc"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/inventory/rpc/inventory"
)

type InventoryServer struct {
	svcCtx *svc.ServiceContext
	inventory.UnimplementedInventoryServer
}

func NewInventoryServer(svcCtx *svc.ServiceContext) *InventoryServer {
	return &InventoryServer{
		svcCtx: svcCtx,
	}
}

// 库存管理
func (s *InventoryServer) GetStock(ctx context.Context, in *inventory.GetStockRequest) (*inventory.GetStockResponse, error) {
	l := logic.NewGetStockLogic(ctx, s.svcCtx)
	return l.GetStock(in)
}

func (s *InventoryServer) UpdateStock(ctx context.Context, in *inventory.UpdateStockRequest) (*inventory.UpdateStockResponse, error) {
	l := logic.NewUpdateStockLogic(ctx, s.svcCtx)
	return l.UpdateStock(in)
}

func (s *InventoryServer) BatchGetStock(ctx context.Context, in *inventory.BatchGetStockRequest) (*inventory.BatchGetStockResponse, error) {
	l := logic.NewBatchGetStockLogic(ctx, s.svcCtx)
	return l.BatchGetStock(in)
}

// 库存锁定/解锁
func (s *InventoryServer) LockStock(ctx context.Context, in *inventory.LockStockRequest) (*inventory.LockStockResponse, error) {
	l := logic.NewLockStockLogic(ctx, s.svcCtx)
	return l.LockStock(in)
}

func (s *InventoryServer) UnlockStock(ctx context.Context, in *inventory.UnlockStockRequest) (*inventory.UnlockStockResponse, error) {
	l := logic.NewUnlockStockLogic(ctx, s.svcCtx)
	return l.UnlockStock(in)
}

func (s *InventoryServer) DeductStock(ctx context.Context, in *inventory.DeductStockRequest) (*inventory.DeductStockResponse, error) {
	l := logic.NewDeductStockLogic(ctx, s.svcCtx)
	return l.DeductStock(in)
}

// 仓储管理
func (s *InventoryServer) CreateWarehouse(ctx context.Context, in *inventory.CreateWarehouseRequest) (*inventory.CreateWarehouseResponse, error) {
	l := logic.NewCreateWarehouseLogic(ctx, s.svcCtx)
	return l.CreateWarehouse(in)
}

func (s *InventoryServer) UpdateWarehouse(ctx context.Context, in *inventory.UpdateWarehouseRequest) (*inventory.UpdateWarehouseResponse, error) {
	l := logic.NewUpdateWarehouseLogic(ctx, s.svcCtx)
	return l.UpdateWarehouse(in)
}

func (s *InventoryServer) ListWarehouses(ctx context.Context, in *inventory.ListWarehousesRequest) (*inventory.ListWarehousesResponse, error) {
	l := logic.NewListWarehousesLogic(ctx, s.svcCtx)
	return l.ListWarehouses(in)
}

// 入库/出库
func (s *InventoryServer) CreateStockIn(ctx context.Context, in *inventory.CreateStockInRequest) (*inventory.CreateStockInResponse, error) {
	l := logic.NewCreateStockInLogic(ctx, s.svcCtx)
	return l.CreateStockIn(in)
}

func (s *InventoryServer) CreateStockOut(ctx context.Context, in *inventory.CreateStockOutRequest) (*inventory.CreateStockOutResponse, error) {
	l := logic.NewCreateStockOutLogic(ctx, s.svcCtx)
	return l.CreateStockOut(in)
}

func (s *InventoryServer) ListStockRecords(ctx context.Context, in *inventory.ListStockRecordsRequest) (*inventory.ListStockRecordsResponse, error) {
	l := logic.NewListStockRecordsLogic(ctx, s.svcCtx)
	return l.ListStockRecords(in)
}
