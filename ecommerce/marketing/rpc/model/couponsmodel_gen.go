// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	couponsFieldNames          = builder.RawFieldNames(&Coupons{})
	couponsRows                = strings.Join(couponsFieldNames, ",")
	couponsRowsExpectAutoSet   = strings.Join(stringx.Remove(couponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	couponsRowsWithPlaceHolder = strings.Join(stringx.Remove(couponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	couponsModel interface {
		Insert(ctx context.Context, data *Coupons) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Coupons, error)
		FindOneByCode(ctx context.Context, code string) (*Coupons, error)
		Update(ctx context.Context, data *Coupons) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCouponsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Coupons struct {
		Id        uint64       `db:"id"`         // ä¼˜æƒ åˆ¸ID
		Name      string       `db:"name"`       // ä¼˜æƒ åˆ¸åç§°
		Code      string       `db:"code"`       // ä¼˜æƒ åˆ¸ç 
		Type      int64        `db:"type"`       // ä¼˜æƒ åˆ¸ç±»åž‹ 1:æ»¡å‡ 2:æŠ˜æ‰£ 3:ç«‹å‡
		Value     float64      `db:"value"`      // ä¼˜æƒ é‡‘é¢æˆ–æŠ˜æ‰£çŽ‡
		MinAmount float64      `db:"min_amount"` // æœ€ä½Žä½¿ç”¨é‡‘é¢
		Status    int64        `db:"status"`     // çŠ¶æ€ 0:æœªå¼€å§‹ 1:è¿›è¡Œä¸­ 2:å·²ç»“æŸ 3:å·²å¤±æ•ˆ
		StartTime sql.NullTime `db:"start_time"` // å¼€å§‹æ—¶é—´
		EndTime   sql.NullTime `db:"end_time"`   // ç»“æŸæ—¶é—´
		Total     int64        `db:"total"`      // å‘è¡Œæ€»é‡
		Received  int64        `db:"received"`   // å·²é¢†å–æ•°é‡
		Used      int64        `db:"used"`       // å·²ä½¿ç”¨æ•°é‡
		PerLimit  int64        `db:"per_limit"`  // æ˜¯å¦é™åˆ¶æ¯äººé¢†å–æ•°é‡
		UserLimit int64        `db:"user_limit"` // æ¯äººé™é¢†æ•°é‡
		CreatedAt time.Time    `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time    `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newCouponsModel(conn sqlx.SqlConn) *defaultCouponsModel {
	return &defaultCouponsModel{
		conn:  conn,
		table: "`coupons`",
	}
}

func (m *defaultCouponsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCouponsModel) FindOne(ctx context.Context, id uint64) (*Coupons, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", couponsRows, m.table)
	var resp Coupons
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponsModel) FindOneByCode(ctx context.Context, code string) (*Coupons, error) {
	var resp Coupons
	query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", couponsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponsModel) Insert(ctx context.Context, data *Coupons) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, couponsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.Type, data.Value, data.MinAmount, data.Status, data.StartTime, data.EndTime, data.Total, data.Received, data.Used, data.PerLimit, data.UserLimit)
	return ret, err
}

func (m *defaultCouponsModel) Update(ctx context.Context, newData *Coupons) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, couponsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Code, newData.Type, newData.Value, newData.MinAmount, newData.Status, newData.StartTime, newData.EndTime, newData.Total, newData.Received, newData.Used, newData.PerLimit, newData.UserLimit, newData.Id)
	return err
}

func (m *defaultCouponsModel) tableName() string {
	return m.table
}
