// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartItemsFieldNames          = builder.RawFieldNames(&CartItems{})
	cartItemsRows                = strings.Join(cartItemsFieldNames, ",")
	cartItemsRowsExpectAutoSet   = strings.Join(stringx.Remove(cartItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cartItemsRowsWithPlaceHolder = strings.Join(stringx.Remove(cartItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallCartCartItemsIdPrefix          = "cache:mallCart:cartItems:id:"
	cacheMallCartCartItemsUserIdSkuIdPrefix = "cache:mallCart:cartItems:userId:skuId:"
)

type (
	cartItemsModel interface {
		Insert(ctx context.Context, data *CartItems) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*CartItems, error)
		FindOneByUserIdSkuId(ctx context.Context, userId uint64, skuId uint64) (*CartItems, error)
		Update(ctx context.Context, data *CartItems) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCartItemsModel struct {
		sqlc.CachedConn
		table string
	}

	CartItems struct {
		Id          uint64         `db:"id"`           // è´­ç‰©è½¦é¡¹ID
		UserId      uint64         `db:"user_id"`      // ç”¨æˆ·ID
		ProductId   uint64         `db:"product_id"`   // å•†å“ID
		SkuId       uint64         `db:"sku_id"`       // SKU ID
		ProductName string         `db:"product_name"` // å•†å“åç§°
		SkuName     string         `db:"sku_name"`     // SKUåç§°
		Image       sql.NullString `db:"image"`        // å•†å“å›¾ç‰‡
		Price       float64        `db:"price"`        // å•†å“å•ä»·
		Quantity    int64          `db:"quantity"`     // å•†å“æ•°é‡
		Selected    int64          `db:"selected"`     // æ˜¯å¦é€‰ä¸­
		CreatedAt   time.Time      `db:"created_at"`   // åˆ›å»ºæ—¶é—´
		UpdatedAt   time.Time      `db:"updated_at"`   // æ›´æ–°æ—¶é—´
	}
)

func newCartItemsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCartItemsModel {
	return &defaultCartItemsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`cart_items`",
	}
}

func (m *defaultCartItemsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	mallCartCartItemsIdKey := fmt.Sprintf("%s%v", cacheMallCartCartItemsIdPrefix, id)
	mallCartCartItemsUserIdSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallCartCartItemsUserIdSkuIdPrefix, data.UserId, data.SkuId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallCartCartItemsIdKey, mallCartCartItemsUserIdSkuIdKey)
	return err
}

func (m *defaultCartItemsModel) FindOne(ctx context.Context, id uint64) (*CartItems, error) {
	mallCartCartItemsIdKey := fmt.Sprintf("%s%v", cacheMallCartCartItemsIdPrefix, id)
	var resp CartItems
	err := m.QueryRowCtx(ctx, &resp, mallCartCartItemsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartItemsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartItemsModel) FindOneByUserIdSkuId(ctx context.Context, userId uint64, skuId uint64) (*CartItems, error) {
	mallCartCartItemsUserIdSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallCartCartItemsUserIdSkuIdPrefix, userId, skuId)
	var resp CartItems
	err := m.QueryRowIndexCtx(ctx, &resp, mallCartCartItemsUserIdSkuIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `sku_id` = ? limit 1", cartItemsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, skuId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartItemsModel) Insert(ctx context.Context, data *CartItems) (sql.Result, error) {
	mallCartCartItemsIdKey := fmt.Sprintf("%s%v", cacheMallCartCartItemsIdPrefix, data.Id)
	mallCartCartItemsUserIdSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallCartCartItemsUserIdSkuIdPrefix, data.UserId, data.SkuId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, cartItemsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProductId, data.SkuId, data.ProductName, data.SkuName, data.Image, data.Price, data.Quantity, data.Selected)
	}, mallCartCartItemsIdKey, mallCartCartItemsUserIdSkuIdKey)
	return ret, err
}

func (m *defaultCartItemsModel) Update(ctx context.Context, newData *CartItems) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	mallCartCartItemsIdKey := fmt.Sprintf("%s%v", cacheMallCartCartItemsIdPrefix, data.Id)
	mallCartCartItemsUserIdSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallCartCartItemsUserIdSkuIdPrefix, data.UserId, data.SkuId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cartItemsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.ProductId, newData.SkuId, newData.ProductName, newData.SkuName, newData.Image, newData.Price, newData.Quantity, newData.Selected, newData.Id)
	}, mallCartCartItemsIdKey, mallCartCartItemsUserIdSkuIdKey)
	return err
}

func (m *defaultCartItemsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallCartCartItemsIdPrefix, primary)
}

func (m *defaultCartItemsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartItemsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCartItemsModel) tableName() string {
	return m.table
}
