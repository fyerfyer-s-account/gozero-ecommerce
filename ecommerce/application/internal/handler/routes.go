// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"net/http"

	auth "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/auth"
	cart "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/cart"
	order "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/order"
	payment "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/payment"
	product "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/product"
	user "github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/handler/user"
	"github.com/fyerfyer/gozero-ecommerce/ecommerce/application/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/auth/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/auth/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/cart",
				Handler: cart.GetCartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/cart/items",
				Handler: cart.AddCartItemHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/cart/items/:id",
				Handler: cart.UpdateCartItemHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/cart/items/:id",
				Handler: cart.DeleteCartItemHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/cart/items/select",
				Handler: cart.SelectCartItemsHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/cart/items/unselect",
				Handler: cart.UnselectCartItemsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/cart/selected",
				Handler: cart.GetSelectedItemsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/orders",
				Handler: order.CreateOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/orders",
				Handler: order.ListOrdersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/orders/:id",
				Handler: order.GetOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/orders/:id/cancel",
				Handler: order.CancelOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/orders/:id/confirm",
				Handler: order.ConfirmReceivedHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/orders/:id/refund",
				Handler: order.CreateRefundHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/payments",
				Handler: payment.CreatePaymentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/payments/:paymentNo/status",
				Handler: payment.GetPaymentStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/refunds/:refundNo/status",
				Handler: payment.GetRefundStatusHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/payments/notify",
				Handler: payment.PaymentNotifyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/refunds/notify",
				Handler: payment.RefundNotifyHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/categories",
				Handler: product.ListCategoriesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products",
				Handler: product.SearchProductsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products/:id",
				Handler: product.GetProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products/:id/reviews",
				Handler: product.GetProductReviewsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/products/:id/skus",
				Handler: product.GetProductSkusHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/user/addresses",
				Handler: user.AddAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/user/addresses",
				Handler: user.ListAddressesHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/user/addresses/:id",
				Handler: user.UpdateAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/api/user/addresses/:id",
				Handler: user.DeleteAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/user/profile",
				Handler: user.GetProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/api/user/profile",
				Handler: user.UpdateProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/user/wallet",
				Handler: user.GetWalletHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/user/wallet/logs",
				Handler: user.GetWalletLogsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
