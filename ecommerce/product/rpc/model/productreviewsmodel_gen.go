// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productReviewsFieldNames          = builder.RawFieldNames(&ProductReviews{})
	productReviewsRows                = strings.Join(productReviewsFieldNames, ",")
	productReviewsRowsExpectAutoSet   = strings.Join(stringx.Remove(productReviewsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productReviewsRowsWithPlaceHolder = strings.Join(stringx.Remove(productReviewsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	productReviewsModel interface {
		Insert(ctx context.Context, data *ProductReviews) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ProductReviews, error)
		Update(ctx context.Context, data *ProductReviews) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultProductReviewsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductReviews struct {
		Id        uint64         `db:"id"`         // è¯„ä»·ID
		ProductId uint64         `db:"product_id"` // å•†å“ID
		UserId    uint64         `db:"user_id"`    // ç”¨æˆ·ID
		OrderId   uint64         `db:"order_id"`   // è®¢å•ID
		Rating    int64          `db:"rating"`     // è¯„åˆ† 1-5
		Content   sql.NullString `db:"content"`    // è¯„ä»·å†…å®¹
		Images    sql.NullString `db:"images"`     // è¯„ä»·å›¾ç‰‡
		Status    int64          `db:"status"`     // çŠ¶æ€ 0:å¾…å®¡æ ¸ 1:å·²é€šè¿‡ 2:å·²æ‹’ç»
		CreatedAt time.Time      `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time      `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newProductReviewsModel(conn sqlx.SqlConn) *defaultProductReviewsModel {
	return &defaultProductReviewsModel{
		conn:  conn,
		table: "`product_reviews`",
	}
}

func (m *defaultProductReviewsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductReviewsModel) FindOne(ctx context.Context, id uint64) (*ProductReviews, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productReviewsRows, m.table)
	var resp ProductReviews
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductReviewsModel) Insert(ctx context.Context, data *ProductReviews) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, productReviewsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.UserId, data.OrderId, data.Rating, data.Content, data.Images, data.Status)
	return ret, err
}

func (m *defaultProductReviewsModel) Update(ctx context.Context, data *ProductReviews) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productReviewsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.UserId, data.OrderId, data.Rating, data.Content, data.Images, data.Status, data.Id)
	return err
}

func (m *defaultProductReviewsModel) tableName() string {
	return m.table
}
