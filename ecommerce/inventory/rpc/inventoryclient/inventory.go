// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: inventory.proto

package inventoryclient

import (
	"context"

	"github.com/fyerfyer/gozero-ecommerce/ecommerce/inventory/rpc/inventory"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchGetStockRequest     = inventory.BatchGetStockRequest
	BatchGetStockResponse    = inventory.BatchGetStockResponse
	CreateStockInRequest     = inventory.CreateStockInRequest
	CreateStockInResponse    = inventory.CreateStockInResponse
	CreateStockOutRequest    = inventory.CreateStockOutRequest
	CreateStockOutResponse   = inventory.CreateStockOutResponse
	CreateWarehouseRequest   = inventory.CreateWarehouseRequest
	CreateWarehouseResponse  = inventory.CreateWarehouseResponse
	DeductStockRequest       = inventory.DeductStockRequest
	DeductStockResponse      = inventory.DeductStockResponse
	GetStockRequest          = inventory.GetStockRequest
	GetStockResponse         = inventory.GetStockResponse
	ListStockRecordsRequest  = inventory.ListStockRecordsRequest
	ListStockRecordsResponse = inventory.ListStockRecordsResponse
	ListWarehousesRequest    = inventory.ListWarehousesRequest
	ListWarehousesResponse   = inventory.ListWarehousesResponse
	LockFailedItem           = inventory.LockFailedItem
	LockItem                 = inventory.LockItem
	LockStockRequest         = inventory.LockStockRequest
	LockStockResponse        = inventory.LockStockResponse
	Stock                    = inventory.Stock
	StockInItem              = inventory.StockInItem
	StockOutItem             = inventory.StockOutItem
	StockRecord              = inventory.StockRecord
	UnlockStockRequest       = inventory.UnlockStockRequest
	UnlockStockResponse      = inventory.UnlockStockResponse
	UpdateStockRequest       = inventory.UpdateStockRequest
	UpdateStockResponse      = inventory.UpdateStockResponse
	UpdateWarehouseRequest   = inventory.UpdateWarehouseRequest
	UpdateWarehouseResponse  = inventory.UpdateWarehouseResponse
	Warehouse                = inventory.Warehouse

	Inventory interface {
		// 库存管理
		GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*GetStockResponse, error)
		UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockResponse, error)
		BatchGetStock(ctx context.Context, in *BatchGetStockRequest, opts ...grpc.CallOption) (*BatchGetStockResponse, error)
		// 库存锁定/解锁
		LockStock(ctx context.Context, in *LockStockRequest, opts ...grpc.CallOption) (*LockStockResponse, error)
		UnlockStock(ctx context.Context, in *UnlockStockRequest, opts ...grpc.CallOption) (*UnlockStockResponse, error)
		DeductStock(ctx context.Context, in *DeductStockRequest, opts ...grpc.CallOption) (*DeductStockResponse, error)
		// 仓储管理
		CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error)
		UpdateWarehouse(ctx context.Context, in *UpdateWarehouseRequest, opts ...grpc.CallOption) (*UpdateWarehouseResponse, error)
		ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error)
		// 入库/出库
		CreateStockIn(ctx context.Context, in *CreateStockInRequest, opts ...grpc.CallOption) (*CreateStockInResponse, error)
		CreateStockOut(ctx context.Context, in *CreateStockOutRequest, opts ...grpc.CallOption) (*CreateStockOutResponse, error)
		ListStockRecords(ctx context.Context, in *ListStockRecordsRequest, opts ...grpc.CallOption) (*ListStockRecordsResponse, error)
	}

	defaultInventory struct {
		cli zrpc.Client
	}
)

func NewInventory(cli zrpc.Client) Inventory {
	return &defaultInventory{
		cli: cli,
	}
}

// 库存管理
func (m *defaultInventory) GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*GetStockResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.GetStock(ctx, in, opts...)
}

func (m *defaultInventory) UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.UpdateStock(ctx, in, opts...)
}

func (m *defaultInventory) BatchGetStock(ctx context.Context, in *BatchGetStockRequest, opts ...grpc.CallOption) (*BatchGetStockResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.BatchGetStock(ctx, in, opts...)
}

// 库存锁定/解锁
func (m *defaultInventory) LockStock(ctx context.Context, in *LockStockRequest, opts ...grpc.CallOption) (*LockStockResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.LockStock(ctx, in, opts...)
}

func (m *defaultInventory) UnlockStock(ctx context.Context, in *UnlockStockRequest, opts ...grpc.CallOption) (*UnlockStockResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.UnlockStock(ctx, in, opts...)
}

func (m *defaultInventory) DeductStock(ctx context.Context, in *DeductStockRequest, opts ...grpc.CallOption) (*DeductStockResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.DeductStock(ctx, in, opts...)
}

// 仓储管理
func (m *defaultInventory) CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.CreateWarehouse(ctx, in, opts...)
}

func (m *defaultInventory) UpdateWarehouse(ctx context.Context, in *UpdateWarehouseRequest, opts ...grpc.CallOption) (*UpdateWarehouseResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.UpdateWarehouse(ctx, in, opts...)
}

func (m *defaultInventory) ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.ListWarehouses(ctx, in, opts...)
}

// 入库/出库
func (m *defaultInventory) CreateStockIn(ctx context.Context, in *CreateStockInRequest, opts ...grpc.CallOption) (*CreateStockInResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.CreateStockIn(ctx, in, opts...)
}

func (m *defaultInventory) CreateStockOut(ctx context.Context, in *CreateStockOutRequest, opts ...grpc.CallOption) (*CreateStockOutResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.CreateStockOut(ctx, in, opts...)
}

func (m *defaultInventory) ListStockRecords(ctx context.Context, in *ListStockRecordsRequest, opts ...grpc.CallOption) (*ListStockRecordsResponse, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.ListStockRecords(ctx, in, opts...)
}
