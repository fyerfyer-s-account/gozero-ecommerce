// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	categoriesFieldNames          = builder.RawFieldNames(&Categories{})
	categoriesRows                = strings.Join(categoriesFieldNames, ",")
	categoriesRowsExpectAutoSet   = strings.Join(stringx.Remove(categoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	categoriesRowsWithPlaceHolder = strings.Join(stringx.Remove(categoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	categoriesModel interface {
		Insert(ctx context.Context, data *Categories) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Categories, error)
		Update(ctx context.Context, data *Categories) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCategoriesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Categories struct {
		Id        uint64         `db:"id"`         // åˆ†ç±»ID
		Name      string         `db:"name"`       // åˆ†ç±»åç§°
		ParentId  uint64         `db:"parent_id"`  // çˆ¶åˆ†ç±»ID
		Level     int64          `db:"level"`      // å±‚çº§
		Sort      int64          `db:"sort"`       // æŽ’åº
		Icon      sql.NullString `db:"icon"`       // å›¾æ ‡URL
		CreatedAt time.Time      `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time      `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newCategoriesModel(conn sqlx.SqlConn) *defaultCategoriesModel {
	return &defaultCategoriesModel{
		conn:  conn,
		table: "`categories`",
	}
}

func (m *defaultCategoriesModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCategoriesModel) FindOne(ctx context.Context, id uint64) (*Categories, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoriesRows, m.table)
	var resp Categories
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoriesModel) Insert(ctx context.Context, data *Categories) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, categoriesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Level, data.Sort, data.Icon)
	return ret, err
}

func (m *defaultCategoriesModel) Update(ctx context.Context, data *Categories) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, categoriesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Level, data.Sort, data.Icon, data.Id)
	return err
}

func (m *defaultCategoriesModel) tableName() string {
	return m.table
}
