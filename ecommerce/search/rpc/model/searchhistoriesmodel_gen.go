// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	searchHistoriesFieldNames          = builder.RawFieldNames(&SearchHistories{})
	searchHistoriesRows                = strings.Join(searchHistoriesFieldNames, ",")
	searchHistoriesRowsExpectAutoSet   = strings.Join(stringx.Remove(searchHistoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	searchHistoriesRowsWithPlaceHolder = strings.Join(stringx.Remove(searchHistoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	searchHistoriesModel interface {
		Insert(ctx context.Context, data *SearchHistories) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SearchHistories, error)
		Update(ctx context.Context, data *SearchHistories) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSearchHistoriesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SearchHistories struct {
		Id        uint64    `db:"id"`         // è‡ªå¢žID
		UserId    uint64    `db:"user_id"`    // ç”¨æˆ·ID
		Keyword   string    `db:"keyword"`    // æœç´¢å…³é”®è¯
		CreatedAt time.Time `db:"created_at"` // åˆ›å»ºæ—¶é—´
	}
)

func newSearchHistoriesModel(conn sqlx.SqlConn) *defaultSearchHistoriesModel {
	return &defaultSearchHistoriesModel{
		conn:  conn,
		table: "`search_histories`",
	}
}

func (m *defaultSearchHistoriesModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSearchHistoriesModel) FindOne(ctx context.Context, id uint64) (*SearchHistories, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchHistoriesRows, m.table)
	var resp SearchHistories
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSearchHistoriesModel) Insert(ctx context.Context, data *SearchHistories) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, searchHistoriesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Keyword)
	return ret, err
}

func (m *defaultSearchHistoriesModel) Update(ctx context.Context, data *SearchHistories) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, searchHistoriesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Keyword, data.Id)
	return err
}

func (m *defaultSearchHistoriesModel) tableName() string {
	return m.table
}
