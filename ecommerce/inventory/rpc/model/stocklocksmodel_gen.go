// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stockLocksFieldNames          = builder.RawFieldNames(&StockLocks{})
	stockLocksRows                = strings.Join(stockLocksFieldNames, ",")
	stockLocksRowsExpectAutoSet   = strings.Join(stringx.Remove(stockLocksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stockLocksRowsWithPlaceHolder = strings.Join(stringx.Remove(stockLocksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallInventoryStockLocksIdPrefix           = "cache:mallInventory:stockLocks:id:"
	cacheMallInventoryStockLocksOrderNoSkuIdPrefix = "cache:mallInventory:stockLocks:orderNo:skuId:"
)

type (
	stockLocksModel interface {
		Insert(ctx context.Context, data *StockLocks) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*StockLocks, error)
		FindOneByOrderNoSkuId(ctx context.Context, orderNo string, skuId uint64) (*StockLocks, error)
		Update(ctx context.Context, data *StockLocks) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultStockLocksModel struct {
		sqlc.CachedConn
		table string
	}

	StockLocks struct {
		Id          uint64    `db:"id"`           // é”å®šID
		OrderNo     string    `db:"order_no"`     // è®¢å•å·
		SkuId       uint64    `db:"sku_id"`       // SKU ID
		WarehouseId uint64    `db:"warehouse_id"` // ä»“åº“ID
		Quantity    int64     `db:"quantity"`     // é”å®šæ•°é‡
		Status      int64     `db:"status"`       // çŠ¶æ€ 1:é”å®š 2:å·²è§£é” 3:å·²æ‰£å‡
		CreatedAt   time.Time `db:"created_at"`   // åˆ›å»ºæ—¶é—´
		UpdatedAt   time.Time `db:"updated_at"`   // æ›´æ–°æ—¶é—´
	}
)

func newStockLocksModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStockLocksModel {
	return &defaultStockLocksModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`stock_locks`",
	}
}

func (m *defaultStockLocksModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	mallInventoryStockLocksIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockLocksIdPrefix, id)
	mallInventoryStockLocksOrderNoSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallInventoryStockLocksOrderNoSkuIdPrefix, data.OrderNo, data.SkuId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallInventoryStockLocksIdKey, mallInventoryStockLocksOrderNoSkuIdKey)
	return err
}

func (m *defaultStockLocksModel) FindOne(ctx context.Context, id uint64) (*StockLocks, error) {
	mallInventoryStockLocksIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockLocksIdPrefix, id)
	var resp StockLocks
	err := m.QueryRowCtx(ctx, &resp, mallInventoryStockLocksIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stockLocksRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStockLocksModel) FindOneByOrderNoSkuId(ctx context.Context, orderNo string, skuId uint64) (*StockLocks, error) {
	mallInventoryStockLocksOrderNoSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallInventoryStockLocksOrderNoSkuIdPrefix, orderNo, skuId)
	var resp StockLocks
	err := m.QueryRowIndexCtx(ctx, &resp, mallInventoryStockLocksOrderNoSkuIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_no` = ? and `sku_id` = ? limit 1", stockLocksRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderNo, skuId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStockLocksModel) Insert(ctx context.Context, data *StockLocks) (sql.Result, error) {
	mallInventoryStockLocksIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockLocksIdPrefix, data.Id)
	mallInventoryStockLocksOrderNoSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallInventoryStockLocksOrderNoSkuIdPrefix, data.OrderNo, data.SkuId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, stockLocksRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.SkuId, data.WarehouseId, data.Quantity, data.Status)
	}, mallInventoryStockLocksIdKey, mallInventoryStockLocksOrderNoSkuIdKey)
	return ret, err
}

func (m *defaultStockLocksModel) Update(ctx context.Context, newData *StockLocks) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	mallInventoryStockLocksIdKey := fmt.Sprintf("%s%v", cacheMallInventoryStockLocksIdPrefix, data.Id)
	mallInventoryStockLocksOrderNoSkuIdKey := fmt.Sprintf("%s%v:%v", cacheMallInventoryStockLocksOrderNoSkuIdPrefix, data.OrderNo, data.SkuId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stockLocksRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderNo, newData.SkuId, newData.WarehouseId, newData.Quantity, newData.Status, newData.Id)
	}, mallInventoryStockLocksIdKey, mallInventoryStockLocksOrderNoSkuIdKey)
	return err
}

func (m *defaultStockLocksModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMallInventoryStockLocksIdPrefix, primary)
}

func (m *defaultStockLocksModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stockLocksRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStockLocksModel) tableName() string {
	return m.table
}
