// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hotKeywordsFieldNames          = builder.RawFieldNames(&HotKeywords{})
	hotKeywordsRows                = strings.Join(hotKeywordsFieldNames, ",")
	hotKeywordsRowsExpectAutoSet   = strings.Join(stringx.Remove(hotKeywordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hotKeywordsRowsWithPlaceHolder = strings.Join(stringx.Remove(hotKeywordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	hotKeywordsModel interface {
		Insert(ctx context.Context, data *HotKeywords) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*HotKeywords, error)
		FindOneByKeyword(ctx context.Context, keyword string) (*HotKeywords, error)
		Update(ctx context.Context, data *HotKeywords) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultHotKeywordsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HotKeywords struct {
		Id        uint64    `db:"id"`         // è‡ªå¢žID
		Keyword   string    `db:"keyword"`    // å…³é”®è¯
		Count     int64     `db:"count"`      // æœç´¢æ¬¡æ•°
		IsManual  int64     `db:"is_manual"`  // æ˜¯å¦æ‰‹åŠ¨æ·»åŠ
		Status    int64     `db:"status"`     // çŠ¶æ€ 1:æ˜¾ç¤º 2:éšè—
		Sort      int64     `db:"sort"`       // æŽ’åº
		CreatedAt time.Time `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newHotKeywordsModel(conn sqlx.SqlConn) *defaultHotKeywordsModel {
	return &defaultHotKeywordsModel{
		conn:  conn,
		table: "`hot_keywords`",
	}
}

func (m *defaultHotKeywordsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHotKeywordsModel) FindOne(ctx context.Context, id uint64) (*HotKeywords, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", hotKeywordsRows, m.table)
	var resp HotKeywords
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHotKeywordsModel) FindOneByKeyword(ctx context.Context, keyword string) (*HotKeywords, error) {
	var resp HotKeywords
	query := fmt.Sprintf("select %s from %s where `keyword` = ? limit 1", hotKeywordsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, keyword)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHotKeywordsModel) Insert(ctx context.Context, data *HotKeywords) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, hotKeywordsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Keyword, data.Count, data.IsManual, data.Status, data.Sort)
	return ret, err
}

func (m *defaultHotKeywordsModel) Update(ctx context.Context, newData *HotKeywords) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hotKeywordsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Keyword, newData.Count, newData.IsManual, newData.Status, newData.Sort, newData.Id)
	return err
}

func (m *defaultHotKeywordsModel) tableName() string {
	return m.table
}
