// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productIndicesFieldNames          = builder.RawFieldNames(&ProductIndices{})
	productIndicesRows                = strings.Join(productIndicesFieldNames, ",")
	productIndicesRowsExpectAutoSet   = strings.Join(stringx.Remove(productIndicesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productIndicesRowsWithPlaceHolder = strings.Join(stringx.Remove(productIndicesFieldNames, "`product_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	productIndicesModel interface {
		Insert(ctx context.Context, data *ProductIndices) (sql.Result, error)
		FindOne(ctx context.Context, productId uint64) (*ProductIndices, error)
		Update(ctx context.Context, data *ProductIndices) error
		Delete(ctx context.Context, productId uint64) error
	}

	defaultProductIndicesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductIndices struct {
		ProductId uint64    `db:"product_id"` // å•†å“ID
		Data      string    `db:"data"`       // ç´¢å¼•æ•°æ®
		Status    int64     `db:"status"`     // çŠ¶æ€ 1:æ­£å¸¸ 2:åˆ é™¤
		CreatedAt time.Time `db:"created_at"` // åˆ›å»ºæ—¶é—´
		UpdatedAt time.Time `db:"updated_at"` // æ›´æ–°æ—¶é—´
	}
)

func newProductIndicesModel(conn sqlx.SqlConn) *defaultProductIndicesModel {
	return &defaultProductIndicesModel{
		conn:  conn,
		table: "`product_indices`",
	}
}

func (m *defaultProductIndicesModel) Delete(ctx context.Context, productId uint64) error {
	query := fmt.Sprintf("delete from %s where `product_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, productId)
	return err
}

func (m *defaultProductIndicesModel) FindOne(ctx context.Context, productId uint64) (*ProductIndices, error) {
	query := fmt.Sprintf("select %s from %s where `product_id` = ? limit 1", productIndicesRows, m.table)
	var resp ProductIndices
	err := m.conn.QueryRowCtx(ctx, &resp, query, productId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductIndicesModel) Insert(ctx context.Context, data *ProductIndices) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, productIndicesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.Data, data.Status)
	return ret, err
}

func (m *defaultProductIndicesModel) Update(ctx context.Context, data *ProductIndices) error {
	query := fmt.Sprintf("update %s set %s where `product_id` = ?", m.table, productIndicesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Data, data.Status, data.ProductId)
	return err
}

func (m *defaultProductIndicesModel) tableName() string {
	return m.table
}
